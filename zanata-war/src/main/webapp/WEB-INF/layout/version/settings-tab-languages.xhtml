<ui:composition xmlns="http://www.w3.org/1999/xhtml"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:a4j="http://richfaces.org/a4j"
  xmlns:s="http://jboss.org/schema/seam/taglib"
  xmlns:f="http://java.sun.com/jsf/core"
  xmlns:zanata="http://java.sun.com/jsf/composite/zanata">

  <h:outputScript library="script" name="settings-tab-languages.js" />

<script type="text/javascript">
  //<![CDATA[

  /**
   * Attach events for checkboxes that control the checked state of all items in
   * a list.
   *
   * The checkboxes are identified by having an attribute
   * "data-select-all-for-list", and the value for that attribute is a selector
   * for the list to control.
   *
   * This assumes that the list has checkboxes with class
   * js-form__checkbox__input each in a container with class js-form__checkbox.
   */
  function initSelectAllCheckboxes() {
    var $ = jQuery;
    // find anything with the data attribute for the list to respond to and control
    var selectAllCheckboxes = $('[data-select-all-for-list]');

    // set up event on static element for behaviour when clicked to check or uncheck
    selectAllCheckboxes.each(function (index) {
      var selectAllCheckbox = $(this);
      var selector = '[data-select-all-for-list]:eq(' + index + ')';
      //console.log('index is %i, for selector %s', index, selector);
      var eventDelegate = getStaticAncestor($(this));
      //console.log('eventDelegate: %o', eventDelegate);
      eventDelegate.on('click', selector, function (event) {
        console.log('IT IS RUNNING (the code for the select all checkboxes');
        var containingDiv = event.currentTarget;
        var checkbox = $(containingDiv).find('input')[0];
        // The checked state does not update until the next loop.
        setImmediate(function () {
          var checked = checkbox.checked;
          var listSelector = selectAllCheckbox.data('select-all-for-list');
          // Only click visible ones
          $(listSelector).find('.js-form__checkbox:visible').click();
        });
      });
    });

    // TODO set up click event on list children to recheck and show state based
    // on selection. Re-use the list checking function, may need to have it
    // return an object with each quantifier as a parameter.

    // DO THIS! call zanata.form.appendCheckboxes(refreshedcomponent)

    function setImmediate (fun) {
      return setTimeout(fun, 0);
    }
  }

  function selectAllClicked($this) {
    // The checked state does not update until the next loop.
    setTimeout(function() {
      var listContainerSelector = $this.data('select-all-for-list');
      var checked = $this.find('.js-form__checkbox__input').prop('checked');
      if(checked) {
        $(listContainerSelector).find('.js-form__checkbox:visible:not(.is-checked)').click();
      } else {
        $(listContainerSelector).find('.js-form__checkbox.is-checked').click();
      }
    }, 0)
  }



  // FIXME move initListOperations into assets.

  $(document).ready(initListOperations);

  /**
   * Attach events for controlling appearance of elements in response to list
   * selections.
   *
   * To make an element's appearance depend on selections in a list, add a data
   * attribute to indicate which list should be used, and a data attribute for
   * each quantity of selections you wish to appearance to change with, and
   * which css classes should be added or removed.
   *
   * Indicate the target list using the attribute data-target-list, with a
   * jQuery selector that matches the list of interest.
   *
   * Classes to toggle are specified as the value of a data attribute. The data
   * attribute name includes the quantifier that determines when the class is
   * present or absent. The data attribute name is in the form
   * data-[quantifier]-selected-class.
   *
   * The following quantifiers are available. Note that an item is considered
   * selected if it has the class 'is-checked':
   *
   *  - none: no items in the list are selected
   *  - one: exactly 1 item in the list is selected
   *  - multiple: 2 or more items in the list are selected
   *  - some: 1 or more items in the list are selected, but not all items.
   *  - any: 1 or more items in the list are selected
   *  - all: there are 1 or more items in the list and all of them are selected
   *
   * Quantifiers can also be prefixed with not- to invert their meaning.
   * e.g. not-any has the same meaning as none.
   *
   * Multiple quantifiers may be used in separate data attributes on the same
   * element. If two quantifiers toggle the same css class, the quantifier with
   * the highest precedence will determine the toggle state (the other is
   * essentially ignored, but may toggle other css classes too). Quantifiers
   * from highest to lowest precedence are:
   *
   *  - not-none
   *  - none
   *  - not-one
   *  - one
   *  - not-all
   *  - all
   *  - not-some
   *  - some
   *  - not-multiple
   *  - multiple
   *  - not-any
   *  - any
   *
   *
   * Example: show a button only when items are selected, and change its label
   *          to singular or plural depending on the number selected. The button
   *          should be highlighted and have red text if all the items are
   *          selected. Assume that all the css classes used are defined and
   *          have the obvious effect.
   *
   *   <button data-target-list="#my-list"
   *           data-none-selected-class="is-hidden"
   *           data-all-selected-class="highlighted red-text">
   *     <span data-target-list="#my-list"
   *           data-not-one-selected-class="is-hidden">
   *       Delete Selected Item</span>
   *     <span data-target-list="#my-list"
   *           data-not-multiple-selected-class="is-hidden">
   *       Delete Selected Items</span>
   *   </button>
   *   <ul id="my-list">
   *     <li />
   *     <li />
   *     <li />
   *   </ul>
   *
   */
  function initListOperations() {
    var $ = jQuery;
    var listOperations = $('[data-target-list]');

    while (listOperations.length > 0) {
      listOperations.first().each(function () {
        var targetListSelector = $(this).data('target-list');
        bindOperationToList(targetListSelector);
        // All operations for a list are discovered dynamically, so each target
        // list only needs to be registered once.
        listOperations = listOperations.not('[data-target-list="' + targetListSelector + '"]');
      });
    }


    function bindOperationToList (targetListSelector) {
      // Event handlers are lost if they are in a region that is refreshed from
      // an ajax call. They are instead delegated to an ancestor element that is
      // marked as static by the developer, using the body as a fallback.
      var eventDelegate = getStaticAncestor($(targetListSelector));
      eventDelegate.on('change', targetListSelector, delayedTriggerListRecheck);

      // FIXME this waits for the script that changes the is-checked class on the
      //       item, but this should be triggered directly by that script when
      //       this code is moved to assets.
      function delayedTriggerListRecheck () {
        //console.log('delayedTriggerListRecheck');
        setTimeout(triggerListRecheck, 20);
      }

      function triggerListRecheck() {
        var targetList = $(targetListSelector);
        var totalElements = targetList.find('.js-form__checkbox__input').size();
        var selectedElements = targetList.find('.js-form__checkbox__input:checked').size();

        var none = selectedElements === 0;
        var one = selectedElements === 1;
        var multiple = selectedElements > 1;
        var some = selectedElements > 0 && selectedElements < totalElements;
        var any = selectedElements > 0;
        // all is purposely false for an empty list
        var all = selectedElements === totalElements && totalElements > 0;

        // $('.js-list-operation[data-target-list="' + targetListSelector + '"]')
        $('[data-target-list="' + targetListSelector + '"]')
          .each(function () {
            var $element = $(this);

            // specifically ordered so that items dealing with the same class
            // will have the desired precedence.
            updateClassesForCondition($element, 'any', any);
            updateClassesForCondition($element, 'multiple', multiple);
            updateClassesForCondition($element, 'some', some);
            updateClassesForCondition($element, 'all', all);
            updateClassesForCondition($element, 'one', one);
            updateClassesForCondition($element, 'none', none);
          });

        function updateClassesForCondition($element, condition, state) {
          if ($element.attr('data-' + condition + '-selected-class')) {
            $element.toggleClass($element.data(condition + '-selected-class'),
              state);
          }
          if ($element.attr('data-not-' + condition + '-selected-class')) {
            $element.toggleClass($element.data('not-' + condition + '-selected-class'),
              !state);
          }
        }
      }
    }
  }

  /**
   * Get a function to handle keyup on locale filter textboxes.
   *
   * Uses an IIFE to generate a closure so that 'oninput' support does not have
   * to be checked on every invocation (it is assumed that the browser will not
   * gain additional functionality during execution).
   */
  var onFilterLocalesTextboxKeyUp = (function () {
    var inputEventSupported = isInputEventSupported();

    return onFilterLocalesTextboxKeyUp;

    /**
     * Respond to user typing in a locale filter textbox.
     *
     * This just prevents Enter from submitting, but if the 'oninput' event is
     * not supported it will also trigger filtering of the list.
     *
     * textboxSelector: jQuery selector for the textbox that the user typed in
     * targetListSelector: jQuery selector for the list that is to be filtered
     * event: the event generated by the user typing (e.g. keyUp).
     */
    function onFilterLocalesTextboxKeyUp(textboxSelector, targetListSelector, event) {
      if (isEnterKey(event)) {
        event.preventDefault();
        return false;
      } else if (!inputEventSupported) {
        filterLocalesFromTextBox(textboxSelector, targetListSelector);
      }
    }

    /**
     * Determine whether the 'input' event is supported by the current browser.
     */
    function isInputEventSupported() {
      var eventName = 'oninput';
      var el = document.createElement('input');
      var isSupported = (eventName in el);
      if (!isSupported) {
        el.setAttribute(eventName, 'return;');
        isSupported = typeof el[eventName] === 'function';
      }
      el = null;
      return isSupported;
    }
  })();

  /**
   * Attach to keypress event to prevent submission of form when enter is
   * pressed in a textbox.
   */
  function doNotSubmit(event) {
    if (isEnterKey(event)) {
      event.preventDefault();
    }
  }

  /*
   * Filter a given locale list based on the value of a given textbox.
   */
  function filterLocalesFromTextBox(textboxSelector, targetListSelector) {
    var $ = jQuery;

    var textbox = $(textboxSelector).first();
    var filterText = textbox.val();
    var previousFilterText = textbox.data('previous-value');

    // previousFilterText will be undefined initially, so the filter will always
    // run the first time.
    if (filterText === previousFilterText) {
      return;
    }

    // going ahead with a new filter value, store the new filter value to
    // compare next time.
    textbox.data('previous-value', filterText);

    var targetList = $(targetListSelector);

    if (filterText.length === 0) {
      // no filter, display all
      setLanguageListItemsVisibility(targetList, function () { return true; });
    } else {
      setLanguageListItemsVisibility(targetList, function (listItem) {
        var name = listItem.find('.js-locale-name').text();
        var code = listItem.find('.js-locale-id').text();
        var alias = listItem.find('.js-locale-alias').text();

        return matches(name) || matches(code) || matches(alias);

        function matches (text) {
          var text = text.toLowerCase();
          var filter = filterText.toLowerCase();
          var foundMatch = text.indexOf(filter) !== -1;
          return foundMatch;
        }
      });
    }

    // Make sure hidden checkboxes are not checked (sets flags for check state).
    unselectHiddenItems(targetListSelector);

    // Make sure revealed checkboxes have their previous check state restored.
    setCheckStateFromFlags(targetListSelector);

    /**
     * Set list items to is-hidden or not based on a predicate.
     *
     * If the predicate returns true for the element, it will not have the class
     * is-hidden, otherwise the element will have the class is-hidden.
     *
     * The predicate should expect a jquery object of a single element.
     */
    function setLanguageListItemsVisibility(targetList, predicate) {
      var $ = jQuery;
      var showAny = false;

      var items = targetList.children();

      items.each(function (index, element) {
        var $element = $(element);
        var show = predicate($element);
        $element.toggleClass('is-hidden', !show);
        showAny = showAny || show;
      });

      var emptyMessageSelector = targetList.data('empty-results-indicator');
      var emptyMessage = $(emptyMessageSelector);
      var searchTextHolder = emptyMessage.find('.js-search-term');
      // filterText is defined in the parent scope of this function.
      searchTextHolder.text(filterText);
      emptyMessage.toggleClass('is-hidden', showAny);
      // The list itself is shown or hidden so that its specific styles do not
      // make the layout look strange.
      targetList.toggleClass('is-hidden', !showAny);
    }

    /**
     * Given a selector for a list of items, ensure that no items with class
     * is-hidden are selected.
     */
    function unselectHiddenItems(listSelector) {
      var checkedItems = $(listSelector)
        .find('input.js-form__checkbox__input:hidden:checked');
      checkedItems.data('checked-when-visible', true);
      checkedItems.prop('checked', false)
        .change();
    }

    /*
     * Finds checkboxes in the list that are visible and flagged to be checked
     * when visible, makes sure they are checked and removes the flag.
     */
    function setCheckStateFromFlags(listSelector) {
      var list = $(listSelector);
      var items = list.find('input.js-form__checkbox__input:visible');
      items.each(function (i, elem) {
        var checkbox = $(elem);
        if (checkbox.data('checked-when-visible')) {
          checkbox.removeData('checked-when-visible');
          checkbox.prop('checked', true).change();
        }
      });
    }

  }

  //]]>
</script>

  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.Languages']}
  </h2>

  <h:form id="settings-languages-form" styleClass="l--push-bottom-0">
    <s:div id="settings-languages-list">

      <button styleClass="button--small l--push-bottom-half" jsfc="a4j:commandButton"
        value="#{msgs['jsf.Language.useGlobal']}"
        rendered="#{versionHome.overrideLocales}"
        action="#{versionHome.useDefaultLocales()}"
        render="settings-languages-form"/>

      <button jsfc="a4j:commandButton"
        styleClass="button--small l--push-bottom-half l--push-left-half"
        value="#{msgs['jsf.localeAlias.RemoveAllAliases']}"
        rendered="#{not empty versionHome.localeAliases}"
        action="#{versionHome.removeAllLocaleAliases()}"
        render="settings-languages-form"/>

      <ui:remove><!-- Active Languages --></ui:remove>

      <ui:decorate template="../project/languages-list.xhtml" >
        <ui:param name="id" value="active-locales" />
        <ui:param name="heading" value="#{msgs['jsf.Enabled']}" />
        <ui:param name="filterText" value="#{versionHome.enabledLocalesFilter}" />
        <ui:param name="languages" value="#{versionHome.enabledLocales}" />
        <ui:param name="noLanguagesPlaceholder" value="#{msgs['jsf.languages.NoActiveLanguages']}" />

        <ui:define name="listOperations">
          <zanata:ajax-command-link
            action="#{versionHome.disableSelectedLocales()}"
            oncomplete="refreshStatistics()"
            styleClass="button--link link--danger"
            render="settings-languages-list">
            <f:facet name="loading">
              <span class="txt--neutral">
                #{msgs['jsf.project.DisableLanguages.inProgress.label']}
              </span>
            </f:facet>
            <i class="i i--remove"></i>
            #{msgs['jsf.languages.DisableLanguages.short']}
          </zanata:ajax-command-link>

          <zanata:ajax-command-link
            action="#{versionHome.removeSelectedLocaleAliases}"
            styleClass="button--link link--danger l--push-left-half"
            render="settings-languages-list">
            <f:facet name="loading">
              <span class="txt--neutral">
                #{msgs['jsf.LocaleAlias.DeleteAliases.inProgress.label']}
              </span>
            </f:facet>
            <i class="i i--trash"></i>
            #{msgs['jsf.LocaleAlias.DeleteAliases']}
          </zanata:ajax-command-link>
        </ui:define>

        <ui:define name="listHeader">
          <div class="g__item w--5-12"><h4 class="zeta">
            #{msgs['jsf.NativeName.short']}</h4></div>
          <div class="g__item w--2-12"><h4 class="zeta">
            #{msgs['jsf.LocaleCode.short']}</h4></div>
          <div class="g__item w--2-12"><h4 class="zeta">
            #{msgs['jsf.LocaleAlias.short']}
            <i class="i i--info" title="#{msgs['jsf.LocaleAlias.tooltip']}"></i>
          </h4></div>
          <div class="g__item w--3-12"></div>
        </ui:define>

        <ui:define name="listRow">
          <h:selectBooleanCheckbox
            value="#{versionHome.selectedEnabledLocales[locale.localeId]}"
            styleClass="form__checkbox__input js-form__checkbox__input"/>

          <div class="js-form__checkbox__label l--pad-left-1half">
            <div class="g g--tight">
              <div class="g__item w--5-12 w--1-s js-locale-name">
                #{locale.retrieveDisplayName()}
              </div>
              <div class="g__item w--2-12 w--3-10-s">
                <span class="txt--understated js-locale-id">#{locale.localeId}</span>
              </div>
              <div class="g__item w--2-12 w--3-10-s">
                <span class="txt--understated js-locale-alias">
                  #{versionHome.getLocaleAlias(locale)}
                </span>
              </div>

              <div class="g__item w--3-12 w--4-10-s l--pad-right-half txt--align-right txt--align-right-s">
                <div id="language-actions-#{locale.localeId}"
                  class="l--push-right-quarter reveal__target">
                  <div class="dropdown dropdown--small dropdown--right dropdown--single js-dropdown">
                    <div class="button--group">
                      <zanata:ajax-command-button
                        oncomplete="refreshStatistics();"
                        action="#{versionHome.disableLocale(locale)}"
                        styleClass="button button--small"
                        render="settings-languages-list">
                        #{msgs['jsf.languages.DisableLanguage.short']}
                      </zanata:ajax-command-button>
                      <button class="button button--small js-dropdown__toggle">
                        <i class="i i--arrow-down"></i>
                      </button>
                    </div>
                    <ul class="dropdown__content js-dropdown__content">
                      <s:fragment rendered="#{not versionHome.hasLocaleAlias(locale)}">
                        <li>
                          <h:outputLink id="addLocaleAliasLink"
                            styleClass="dropdown__content__link button--link i__item--left"
                            onclick="showLocaleAliasInput('#{locale.localeId}', '#{versionHome.getLocaleAlias(locale)}'); return false;"
                            value="#">
                            <i class="i i--plus i__item__icon"></i>
                            #{msgs['jsf.languages.AddAlias']}
                          </h:outputLink>
                        </li>
                      </s:fragment>
                      <s:fragment rendered="#{versionHome.hasLocaleAlias(locale)}">
                        <li>
                          <h:outputLink id="editLocaleAliasLink"
                            styleClass="dropdown__content__link button--link i__item--left"
                            onclick="showLocaleAliasInput('#{locale.localeId}', '#{versionHome.getLocaleAlias(locale)}'); return false;"
                            value="#">
                            <i class="i i--edit i__item__icon"></i>
                            #{msgs['jsf.languages.EditAlias']}
                          </h:outputLink>
                        </li>
                      </s:fragment>
                      <s:fragment rendered="#{versionHome.hasLocaleAlias(locale)}">
                        <li>
                          <button
                            class="dropdown__content__link button--link txt--danger i__item--left"
                            onclick="deleteLocaleAlias('#{locale.localeId}')">
                            <i class="i i--trash i__item__icon"></i>
                            #{msgs['jsf.languages.DeleteAlias']}
                          </button>
                        </li>
                      </s:fragment>
                    </ul>
                  </div>
                </div>

                <div id="language-processing-#{locale.localeId}"
                  class="is-hidden l--push-right-half">
                  <div id="set-alias-loader-#{locale.localeId}"
                    class="loader--small loader--inline l--push-left-half">
                    <span class="loader__spinner">
                      <span></span>
                      <span></span>
                      <span></span>
                    </span>
                  </div>
                </div>

                <div id="edit-alias-cancel-#{locale.localeId}"
                  class="is-hidden">
                  <button type="button"
                    onclick="hideLocaleAliasInput('#{locale.localeId}');showLocaleActions('#{locale.localeId}');return false;"
                    class="button--link l--float-right l--push-right-half">
                    #{msgs['jsf.Cancel']}
                  </button>
                </div>
              </div>
            </div>
          </div>

          <div class="l--pad-all-quarter bg--high is-hidden"
               id="locale-alias-form-#{locale.localeId}">
            <!-- make for screenreader only -->
            <label for="locale-alias-input" class="is-sr-only">
              #{msgs['jsf.localeAlias.SetLocaleAlias']}
            </label>
            <div class="form--inline">
              <h:inputText id="locale-alias-input"
                required="false"
                value="#{versionHome.enteredLocaleAliases[locale.localeId]}"
                placeholder="e.g. zh_CN"
                onkeydown="return onLocaleAliasInputKeyDown('#{locale.localeId}', event);"
                maxlength="255"
                styleClass="form--inline__input">
              </h:inputText>
              <div class="form--inline__suffix">
                <a4j:commandButton
                  value="#{msgs['jsf.localeAlias.SetLocaleAlias.brief']}"
                  onbegin="hideLocaleAliasInput('#{locale.localeId}'); showLocaleAliasLoader('#{locale.localeId}'); zanata.loader.activate('#set-alias-loader-#{locale.localeId}');"
                  action="#{versionHome.updateToEnteredLocaleAlias(locale.localeId)}"
                  oncomplete="zanata.loader.deactivate('#set-alias-loader-#{locale.localeId}'); showLocaleActions('#{locale.localeId}');"
                  render="settings-languages-list"
                  styleClass="form--inline__addon button--primary" />
              </div>
            </div>
          </div>
        </ui:define>
      </ui:decorate>

      <hr/>

      <ui:decorate template="../project/languages-list.xhtml" >
        <ui:param name="id" value="available-locales" />
        <ui:param name="heading" value="#{msgs['jsf.languages.Available']}" />
        <ui:param name="filterText" value="#{versionHome.disabledLocalesFilter}" />
        <ui:param name="languages" value="#{versionHome.disabledLocales}" />
        <ui:param name="noLanguagesPlaceholder" value="#{msgs['jsf.languages.NoLanguagesAvailable']}" />

        <ui:define name="listHeader">
          <div class="g__item w--5-12">
            <h4 class="zeta">#{msgs['jsf.NativeName.short']}</h4>
          </div>
          <div class="g__item w--2-12">
            <h4 class="zeta">#{msgs['jsf.LocaleCode.short']}</h4>
          </div>
          <div class="g__item w--5-12"></div>
        </ui:define>

        <ui:define name="listOperations">
          <zanata:ajax-command-button
            action="#{versionHome.enableSelectedLocales}"
            styleClass="button--link link--success"
            render="settings-languages-list">
            <f:facet name="loading">
              <span class="txt--neutral">
                ${msgs['jsf.languages.EnableLanguages.inProgress.label']}
              </span>
            </f:facet>
            <i class="i i--checkmark"></i>
            ${msgs['jsf.languages.EnableLanguages.label']}
          </zanata:ajax-command-button>
        </ui:define>

        <ui:define name="listRow">
          <h:selectBooleanCheckbox
            value="#{versionHome.selectedDisabledLocales[locale.localeId]}"
            styleClass="form__checkbox__input js-form__checkbox__input"/>
          <div class="js-form__checkbox__label l--pad-left-1half">
            <div class="g g--tight">
              <div class="g__item w--5-12 w--1-s js-locale-name">
                #{locale.retrieveDisplayName()}
              </div>
              <div class="g__item w--2-12 w--3-10-s">
                <span class="txt--understated js-locale-id">
                  #{locale.localeId.id}
                </span>
              </div>
              <div class="g__item w--5-12 w--7-10-s reveal__target txt--align-right txt--align-right-s">
                <div class="dropdown dropdown--small dropdown--right dropdown--single js-dropdown">
                  <div class="button--group l--push-right-quarter">
                    <zanata:ajax-command-button
                      oncomplete="refreshStatistics();"
                      action="#{versionHome.enableLocale(locale)}"
                      styleClass="button button--small"
                      render="settings-languages-list">
                      #{msgs['jsf.languages.EnableLanguage']}
                    </zanata:ajax-command-button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </ui:define>

      </ui:decorate>

    </s:div>
  </h:form>

</ui:composition>

