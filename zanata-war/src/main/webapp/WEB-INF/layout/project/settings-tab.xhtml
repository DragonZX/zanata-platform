<ui:composition xmlns="http://www.w3.org/1999/xhtml"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:a4j="http://richfaces.org/a4j"
  xmlns:rich="http://richfaces.org/rich"
  xmlns:s="http://jboss.org/schema/seam/taglib"
  xmlns:f="http://java.sun.com/jsf/core"
  xmlns:zanata="http://java.sun.com/jsf/composite/zanata">

<script type="text/javascript">
  //<![CDATA[
  function onValidationOptionChange(validationId) {
    var value = validationId.split('-');
    bindValidationValue(value[0], value[1]);
  }

  function onRestrictedByRoleValueChanged(key, checked) {
    bindRestrictedByRoleValue(key, checked);
  }

  function getUserRoleId() {
    return "[id='#{rich:clientId('user-roles')}']";
  }

  function onPayloadInputKeyDown(input, event) {
      if(event.keyCode === 13) {
        event.preventDefault();
        if(jQuery(input).val()) {
          addWebhook(jQuery(input).val());
        }
        return false;
      }
  }

  function onRemoveWebHook(ele) {
    jQuery(ele).children('i').addClass('is-hidden');
    zanata.loader.activate(jQuery(ele).children('#loader'));
  }

  function showLocaleAliasInput(localeId, currentAlias) {
    var input = localeAliasInput(localeId);
    input.val(currentAlias);
    localeAliasForm(localeId).removeClass('is-hidden');
    showLocaleAliasCancelEdit(localeId);
    input.focus();
  }

  function hideLocaleAliasInput(localeId) {
    localeAliasForm(localeId).addClass('is-hidden');
  }

  function localeAliasForm(localeId) {
    var id = '#locale-alias-form-' + localeId;
    return jQuery(id);
  }

  function localeAliasInput(localeId) {
    return localeAliasForm(localeId).find('input:text');
  }

  function onLocaleAliasInputKeyDown(localeId, event) {
    if (event.keyCode === 13) {
      event.preventDefault();
      var aliasForm = localeAliasForm(localeId);
      var submitButton = aliasForm.find('input:submit');
      submitButton.click();
      return false;
    }
  }

  function deleteLocaleAlias(localeId) {
    var aliasForm = localeAliasForm(localeId);
    var input = aliasForm.find('input:text');
    input.val('');
    var submitButton = aliasForm.find('input:submit');
    submitButton.click();
    return false;
  }

  function showLocaleActions(localeId) {
    var localeActions = '#language-actions-' + localeId;
    showOnlyOneOfLocaleActionStatus(localeId)(localeActions)
  }
  function showLocaleAliasLoader(localeId) {
    var aliasLoader = '#language-processing-' + localeId;
    showOnlyOneOfLocaleActionStatus(localeId)(aliasLoader)
  }
  function showLocaleAliasCancelEdit(localeId) {
    var cancelEdit = '#edit-alias-cancel-' + localeId;
    showOnlyOneOfLocaleActionStatus(localeId)(cancelEdit)
  }

  // FIXME do this with children of an element rather than specifying all manually by id
  function showOnlyOneOfLocaleActionStatus (localeId) {
    return showOnlyOneOf('#language-actions-' + localeId,
                         '#language-processing-' + localeId,
                         '#edit-alias-cancel-' + localeId)
  }

  /**
   * Given any number of jQuery selectors, returns a function that will reveal
   * a given element and ensure that all other selectors passed to this function
   * are hidden.
   */
  function showOnlyOneOf() {
    var i, selectors = Array.prototype.slice.call(arguments);
    return function (show) {
      selectors.forEach(function (selector) {
        jQuery(selector).addClass('is-hidden');
      });
      jQuery(show).removeClass('is-hidden');
    }
  }

  /**
   * Get an ancestor that will not be removed by dynamic element replacement.
   *
   * The ancestor can be used as an event delegate for elements that
   * will be refreshed with ajax.
   *
   * return: the static ancestor as a jQuery object.
   */
  function getStaticAncestor(jqueryElement) {
    return jqueryElement.closest('.js-static-element, body');
  }

  //$(document).ready(initSelectAllCheckboxes);

  /**
   * Attach events for checkboxes that control the checked state of all items in
   * a list.
   *
   * The checkboxes are idenfied by having an attribute
   * "data-select-all-for-list", and the value for that attribute is a selector
   * for the list to control.
   *
   * This assumes that the list has checkboxes with class
   * js-form__checkbox__input each in a container with class js-form__checkbox.
   */
  function initSelectAllCheckboxes() {
    var $ = jQuery;
    // find anything with the data attribute for the list to respond to and control
    var selectAllCheckboxes = $('[data-select-all-for-list]');

    // set up event on static element for behaviour when clicked to check or uncheck
    selectAllCheckboxes.each(function (index) {
      var selectAllCheckbox = $(this);
      var selector = '[data-select-all-for-list]:eq(' + index + ')';
      //console.log('index is %i, for selector %s', index, selector);
      var eventDelegate = getStaticAncestor($(this));
      //console.log('eventDelegate: %o', eventDelegate);
      eventDelegate.on('click', selector, function (event) {
        var containingDiv = event.currentTarget;
        var checkbox = $(containingDiv).find('input')[0];
        // The checked state does not update until the next loop.
        setImmediate(function () {
          var checked = checkbox.checked;
          var listSelector = selectAllCheckbox.data('select-all-for-list');
          // Only click visible ones
          $(listSelector).find('.js-form__checkbox:visible').click();
        });
      });
    });

    // TODO set up click event on list children to recheck and show state based
    // on selection. Re-use the list checking function, may need to have it
    // return an object with each quantifier as a parameter.

    // DO THIS! call zanata.form.appendCheckboxes(refreshedcomponent)

    function setImmediate (fun) {
      return setTimeout(fun, 0);
    }
  }

  function selectAllClicked($this) {
    // The checked state does not update until the next loop.
    setTimeout(function() {
      var listContainerSelector = $this.data('select-all-for-list');
      var checked = $this.find('.js-form__checkbox__input').prop('checked');
      if(checked) {
        $(listContainerSelector).find('.js-form__checkbox:visible:not(.is-checked)').click();
      } else {
        $(listContainerSelector).find('.js-form__checkbox.is-checked').click();
      }
    }, 0)
  }



  // FIXME move initListOperations into assets.

  $(document).ready(initListOperations);

  /**
   * Attach events for controlling appearance of elements in response to list
   * selections.
   *
   * To make an element's appearance depend on selections in a list, add a data
   * attribute to indicate which list should be used, and a data attribute for
   * each quantity of selections you wish to appearance to change with, and
   * which css classes should be added or removed.
   *
   * Indicate the target list using the attribute data-target-list, with a
   * jQuery selector that matches the list of interest.
   * 
   * Classes to toggle are specified as the value of a data attribute. The data
   * attribute name includes the quantifier that determines when the class is
   * present or absent. The data attribute name is in the form
   * data-[quantifier]-selected-class.
   *
   * The following quantifiers are available. Note that an item is considered
   * selected if it has the class 'is-checked':
   *
   *  - none: no items in the list are selected
   *  - one: exactly 1 item in the list is selected
   *  - multiple: 2 or more items in the list are selected
   *  - some: 1 or more items in the list are selected, but not all items.
   *  - any: 1 or more items in the list are selected
   *  - all: there are 1 or more items in the list and all of them are selected
   *
   * Quantifiers can also be prefixed with not- to invert their meaning.
   * e.g. not-any has the same meaning as none.
   *
   * Multiple quantifiers may be used in separate data attributes on the same
   * element. If two quantifiers toggle the same css class, the quantifier with
   * the highest precedence will determine the toggle state (the other is
   * essentially ignored, but may toggle other css classes too). Quantifiers
   * from highest to lowest precedence are:
   *
   *  - not-none
   *  - none
   *  - not-one
   *  - one
   *  - not-all
   *  - all
   *  - not-some
   *  - some
   *  - not-multiple
   *  - multiple
   *  - not-any
   *  - any
   *
   *
   * Example: show a button only when items are selected, and change its label
   *          to singular or plural depending on the number selected. The button
   *          should be highlighted and have red text if all the items are
   *          selected. Assume that all the css classes used are defined and
   *          have the obvious effect.
   *
   *   <button data-target-list="#my-list"
   *           data-none-selected-class="is-hidden"
   *           data-all-selected-class="highlighted red-text">
   *     <span data-target-list="#my-list"
   *           data-not-one-selected-class="is-hidden">
   *       Delete Selected Item</span>
   *     <span data-target-list="#my-list"
   *           data-not-multiple-selected-class="is-hidden">
   *       Delete Selected Items</span>
   *   </button>
   *   <ul id="my-list">
   *     <li />
   *     <li />
   *     <li />
   *   </ul>
   *
   */
  function initListOperations() {
    var $ = jQuery;
    var listOperations = $('[data-target-list]');

    while (listOperations.length > 0) {
      listOperations.first().each(function () {
        var targetListSelector = $(this).data('target-list');
        bindOperationToList(targetListSelector);
        // All operations for a list are discovered dynamically, so each target
        // list only needs to be registered once.
        listOperations = listOperations.not('[data-target-list="' + targetListSelector + '"]');
      });
    }


    function bindOperationToList (targetListSelector) {
      // Event handlers are lost if they are in a region that is refreshed from
      // an ajax call. They are instead delegated to an ancestor element that is
      // marked as static by the developer, using the body as a fallback.
      var eventDelegate = getStaticAncestor($(targetListSelector));
      eventDelegate.on('change', targetListSelector, delayedTriggerListRecheck);

      // FIXME this waits for the script that changes the is-checked class on the
      //       item, but this should be triggered directly by that script when
      //       this code is moved to assets.
      function delayedTriggerListRecheck () {
        //console.log('delayedTriggerListRecheck');
        setTimeout(triggerListRecheck, 20);
      }

      function triggerListRecheck() {
        var targetList = $(targetListSelector);
        var totalElements = targetList.find('.js-form__checkbox__input').size();
        var selectedElements = targetList.find('.js-form__checkbox__input:checked').size();

        var none = selectedElements === 0;
        var one = selectedElements === 1;
        var multiple = selectedElements > 1;
        var some = selectedElements > 0 && selectedElements < totalElements;
        var any = selectedElements > 0;
        // all is purposely false for an empty list
        var all = selectedElements === totalElements && totalElements > 0;

        // $('.js-list-operation[data-target-list="' + targetListSelector + '"]')
        $('[data-target-list="' + targetListSelector + '"]')
          .each(function () {
            var $element = $(this);

            // specifically ordered so that items dealing with the same class
            // will have the desired precedence.
            updateClassesForCondition($element, 'any', any);
            updateClassesForCondition($element, 'multiple', multiple);
            updateClassesForCondition($element, 'some', some);
            updateClassesForCondition($element, 'all', all);
            updateClassesForCondition($element, 'one', one);
            updateClassesForCondition($element, 'none', none);
          });

        function updateClassesForCondition($element, condition, state) {
          if ($element.attr('data-' + condition + '-selected-class')) {
            $element.toggleClass($element.data(condition + '-selected-class'),
              state);
          }
          if ($element.attr('data-not-' + condition + '-selected-class')) {
            $element.toggleClass($element.data('not-' + condition + '-selected-class'),
              !state);
          }
        }
      }
    }
  }

  /**
   * Respond to user typing in a locale filter textbox by filtering locales.
   *
   * textboxSelector: jQuery selector for the textbox that the user typed in
   * targetListSelector: jQuery selector for the list that is to be filtered
   * event: the event generated by the user typing (e.g. keyUp).
   */
  function onFilterLocalesTextboxKeyUp(textboxSelector, targetListSelector, event) {
    if (event.keyCode === 13) {
      event.preventDefault();
      return false;
    } else {
      filterLocalesFromTextBox(textboxSelector, targetListSelector);
    }
  }

  /*
   * Filter a given locale list based on the value of a given textbox.
   */
  function filterLocalesFromTextBox(textboxSelector, targetListSelector) {
    var $ = jQuery;

    var textbox = $(textboxSelector).first();
    var filterText = textbox.val();
    var previousFilterText = textbox.data('previous-value');

    // previousFilterText will be undefined initially, so the filter will always
    // run the first time.
    if (filterText === previousFilterText) {
      return;
    }

    // going ahead with a new filter value, store the new filter value to
    // compare next time.
    textbox.data('previous-value', filterText);

    var targetList = $(targetListSelector);

    if (filterText.length === 0) {
      // no filter, display all
      setLanguageListItemsVisibility(targetList, function () { return true; });
    } else {
      setLanguageListItemsVisibility(targetList, function (listItem) {
        var name = listItem.find('.js-locale-name').text();
        var code = listItem.find('.js-locale-id').text();
        var alias = listItem.find('.js-locale-alias').text();

        return matches(name) || matches(code) || matches(alias);

        function matches (text) {
          var text = text.toLowerCase();
          var filter = filterText.toLowerCase();
          var foundMatch = text.indexOf(filter) !== -1;
          return foundMatch;
        }
      });
    }

    // Make sure hidden checkboxes are not checked (sets flags for check state).
    unselectHiddenItems(targetListSelector);

    // Make sure revealed checkboxes have their previous check state restored.
    setCheckStateFromFlags(targetListSelector);

    /**
     * Set list items to is-hidden or not based on a predicate.
     *
     * If the predicate returns true for the element, it will not have the class
     * is-hidden, otherwise the element will have the class is-hidden.
     *
     * The predicate should expect a jquery object of a single element.
     */
    function setLanguageListItemsVisibility(targetList, predicate) {
      var $ = jQuery;
      var showAny = false;

      var items = targetList.children();

      items.each(function (index, element) {
        var $element = $(element);
        var show = predicate($element);
        $element.toggleClass('is-hidden', !show);
        showAny = showAny || show;
      });

      emptyMessageSelector = targetList.data('empty-results-indicator');
      emptyMessage = $(emptyMessageSelector);
      searchTextHolder = emptyMessage.find('.js-search-term');
      // filterText is defined in the parent scope of this function.
      searchTextHolder.text(filterText);
      emptyMessage.toggleClass('is-hidden', showAny);
      // The list itself is shown or hidden so that its specific styles do not
      // make the layout look strange.
      targetList.toggleClass('is-hidden', !showAny);
    }

    /**
     * Given a selector for a list of items, ensure that no items with class
     * is-hidden are selected.
     */
    function unselectHiddenItems(listSelector) {
      var checkedItems = $(listSelector)
        .find('input.js-form__checkbox__input:hidden:checked');
      checkedItems.data('checked-when-visible', true);
      checkedItems.prop('checked', false)
        .change();
    }

    /*
     * Finds checkboxes in the list that are visible and flagged to be checked
     * when visible, makes sure they are checked and removes the flag.
     */
    function setCheckStateFromFlags(listSelector) {
      var list = $(listSelector);
      var items = list.find('input.js-form__checkbox__input:visible');
      items.each(function (i, elem) {
        var checkbox = $(elem);
        if (checkbox.data('checked-when-visible')) {
          checkbox.removeData('checked-when-visible');
          checkbox.prop('checked', true).change();
        }
      });
    }

  }

  //]]>
</script>

<a4j:jsFunction name="addWebhook"
  onbegin="zanata.loader.activate('#add-url-loader')"
  oncomplete="zanata.loader.deactivate('#add-url-loader');"
  action="#{projectHome.addWebHook(url)}"
  render="settings-webhooks-list">
  <a4j:param name="val1" assignTo="#{url}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindValidationValue"
  action="#{projectHome.updateValidationOption(name, state)}"
  render="validation-list">
  <a4j:param name="val1" assignTo="#{name}"/>
  <a4j:param name="val2" assignTo="#{state}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindCopyTransValue"
  action="#{projectHome.updateCopyTrans(action, value)}">
  <a4j:param name="val1" assignTo="#{action}"/>
  <a4j:param name="val2" assignTo="#{value}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindRestrictedByRoleValue" render="user-roles"
  oncomplete="zanata.form.appendCheckboxes(getUserRoleId())"
  action="#{projectHome.setRestrictedByRole(key, checked)}">
  <a4j:param name="val1" assignTo="#{key}"/>
  <a4j:param name="val2" assignTo="#{checked}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindRestrictRoleValue"
  action="#{projectHome.updateRoles(roleName, isRestricted)}">
  <a4j:param name="val1" assignTo="#{roleName}"/>
  <a4j:param name="val2" assignTo="#{isRestricted}"/>
</a4j:jsFunction>

<h1>#{msgs['jsf.project.ProjectSettings']}</h1>

<div class="tabs--vertical js-tabs">
<ul class="tabs__nav js-tabs-nav">
  <li>
    <a id="settings-general_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/general"
      class="js-url-mod is-active" data-content="#settings-general">
      <i class="i i--settings"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.General']}</span>
    </a>
  </li>
  <li>
    <a id="settings-languages_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/languages"
      class="js-url-mod" data-content="#settings-languages">
      <i class="i i--language"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.Languages']}</span>
    </a>
  </li>
  <li>
    <a id="settings-translation_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/translation"
      class="js-url-mod" data-content="#settings-translation">
      <i class="i i--translate"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.Translation']}</span>
    </a>
  </li>
  <li>
    <a id="settings-permissions_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/permissions"
      class="js-url-mod" data-content="#settings-permissions">
      <i class="i i--users"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.Permissions']}</span>
    </a>
  </li>
  <li>
    <a id="settings-webhooks_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/webhooks"
      class="js-url-mod" data-content="#settings-webhooks">
      <i class="i i--source"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.project.WebHooks']}</span>
    </a>
  </li>
  <li>
    <a id="settings-about_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/about"
      class="js-url-mod" data-content="#settings-about">
      <i class="i i--info"></i>
          <span
            class="is-hidden--m-l-down">#{msgs['jsf.project.About']}</span>
    </a>
  </li>
</ul>
<ul class="tabs__content js-tabs-content">
<li class="is-active" id="settings-general">
  <h2 class="l--push-all-0 gamma d--bottom">#{msgs['jsf.General']}</h2>
  <h:form id="settings-general-form" styleClass="l--constrain-large">
    <ui:include src="edit_form.xhtml"/>

    <h3 class="heading--secondary">#{msgs['jsf.project.SourceCode']}</h3>

    <div class="g--tight l--push-top-half">
      <div class="g__item w--1-2">
        <div class="form__item">
          <h:outputLabel for="homePage">#{msgs['jsf.project.HomePage']}
            <span class="txt--meta">#{msgs['jsf.field.optional']}</span>
          </h:outputLabel>
          <s:decorate id="homePageField" template="../field.xhtml">
            <h:inputText id="homePage" required="false"
              value="#{projectHome.instance.sourceViewURL}">
              <rich:placeholder value="http://" styleClass="txt--neutral"/>
              <a4j:ajax event="blur" render="homePageField" execute="@this"/>
            </h:inputText>
          </s:decorate>

          <p class="txt--meta">
            <h:outputText escape="false"
              value="#{msgs['jsf.Project.sourceurl.message']}"/>
          </p>
        </div>
      </div>
      <div class="g__item w--1-2">
        <div class="form__item">
          <h:outputLabel for="repo">#{msgs['jsf.field.repository']}
            <span class="txt--meta">#{msgs['jsf.field.optional']}</span>
          </h:outputLabel>
          <s:decorate id="repoField" template="../field.xhtml">
            <h:inputText id="repo" required="false"
              value="#{projectHome.instance.sourceCheckoutURL}">
              <a4j:ajax event="blur" render="repoField" execute="@this"/>
            </h:inputText>
          </s:decorate>

          <p class="txt--meta">
            <h:outputText
              escape="false" value="#{msgs['jsf.Project.repo.message']}"/>
          </p>
        </div>
      </div>
    </div>

    <div class="l--push-top-1">
      <a4j:commandLink value="#{msgs['jsf.UpdateGeneralSettings']}"
        id="button-update-settings"
        action="#{projectHome.update}"
        rendered="#{projectHome.managed}"
        render="project-info"
        styleClass="l--push-right-half button--primary"/>
    </div>
    <hr/>
    <s:div styleClass="g--tight" id="status">
      <s:div styleClass="g__item w--1-2 l--push-bottom-1"
        rendered="#{projectHome.instance.status eq 'ACTIVE'}">
        <a4j:commandLink styleClass="button--warning l--push-bottom-half"
          id="button-lock-project"
          action="#{projectHome.updateStatus('R')}" render="status">
          <i
            class="i--left i--lock"></i> #{msgs['jsf.project.readonly']}
        </a4j:commandLink>

        <p class="txt--meta">#{msgs['jsf.project.readonly.Message']}</p>
      </s:div>
      <s:div styleClass="g__item w--1-2 l--push-bottom-1"
        rendered="#{projectHome.instance.status ne 'ACTIVE'}">
        <s:fragment rendered="#{projectHome.instance.status eq 'OBSOLETE'}">
          <button class="button--success l--push-bottom-half"
            disabled="true">
            <i class="i--left i--lock"></i>
            #{msgs['jsf.project.writable']}
          </button>
        </s:fragment>
        <a4j:commandLink styleClass="button--success l--push-bottom-half"
          id="button-unlock-project"
          rendered="#{projectHome.instance.status == 'READONLY'}"
          action="#{projectHome.updateStatus('A')}" render="status">
          <i
            class="i--left i--lock"></i> #{msgs['jsf.project.writable']}
        </a4j:commandLink>

        <p class="txt--meta">#{msgs['jsf.project.writable.Message']}</p>
      </s:div>

      <s:fragment
        rendered="#{s:hasPermission(projectHome.instance, 'mark-obsolete')}">
        <s:div styleClass="g__item w--1-2"
          rendered="#{projectHome.instance.status eq 'OBSOLETE'}">
          <a4j:commandLink styleClass="button--success l--push-bottom-half"
            id="button-unarchive-project"
            action="#{projectHome.updateStatus('A')}" render="status">
            <i class="i--left i--archive"></i>
            #{msgs['jsf.UnArchiveThisProject']}
          </a4j:commandLink>

          <p class="txt--meta">#{msgs['jsf.UnarchiveProject.Message']}</p>
        </s:div>
        <s:div styleClass="g__item w--1-2"
          rendered="#{projectHome.instance.status ne 'OBSOLETE'}">
          <a4j:commandLink styleClass="button--danger l--push-bottom-half"
            id="button-archive-project"
            action="#{projectHome.updateStatus('O')}" render="status">
            <i class="i--left i--archive"></i>
            #{msgs['jsf.ArchiveThisProject']}
          </a4j:commandLink>

          <p class="txt--meta">#{msgs['jsf.ArchiveProject.Message']}</p>
        </s:div>
      </s:fragment>
    </s:div>
  </h:form>
</li>
<li id="settings-languages" class="js-static-element">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.Languages']}
  </h2>
  <h:form id="settings-languages-form" styleClass="l--push-bottom-0">
    <s:div id="settings-languages-list">

      <button styleClass="button--small l--push-bottom-half" jsfc="a4j:commandButton"
        value="#{msgs['jsf.Language.useGlobal']}"
        rendered="#{projectHome.instance.overrideLocales}"
        action="#{projectHome.updateLanguagesFromGlobal()}"
        render="settings-languages-list"/>

      <button jsfc="a4j:commandButton"
        styleClass="button--small l--push-bottom-half l--push-left-half"
        value="#{msgs['jsf.localeAlias.RemoveAllAliases']}"
        rendered="#{not empty projectHome.instance.localeAliases}"
        action="#{projectHome.instance.localeAliases.clear()}"
        render="settings-languages-list"/>

      <h3 class="heading--secondary">#{msgs['jsf.Enabled']}</h3>

      <ui:remove><!-- Active Languages --></ui:remove>

      <div class="w--5-12 form--search js-form--search">
        <label class="is-sr-only">#{msgs['jsf.languages.FilterLanguages']}</label>
        <h:inputText id="filter-active-locales-input"
          required="false"
          placeholder="#{msgs['jsf.languages.FilterLanguages']}"
          value="#{projectHome.activeLocaleFilter}"
          onkeyup="return onFilterLocalesTextboxKeyUp('#settings-languages-form\\:filter-active-locales-input', '#settings-active-locales', event);"
          maxlength="255"
          styleClass="form--search__input js-form--search__input l--push-bottom-quarter">
        </h:inputText>

        <!-- TODO make this clear the filter textbox -->
        <button
          class="button--link form--search__clear js-form--search__clear is-hidden"
          onclick="event.preventDefault()">
          <i class="i i--remove"></i>
        </button>
      </div>

      <s:fragment rendered="#{empty projectHome.getInstanceActiveLocales()}">
        <!-- TODO fix style -->
        <div id="settings-active-locales-no-results">
          #{msgs['jsf.NoActiveLanguages']}
        </div>
      </s:fragment>

      <s:fragment rendered="#{not empty projectHome.getInstanceActiveLocales()}">


        <div class="is-hidden--s l--pad-v-quarter">
          <zanata:select-all-checkbox listSelector="#settings-active-locales"/>
          <div class="l--pad-left-1half">
            <div class="g g--tight js-list-operation"
              data-target-list="#settings-active-locales"
              data-any-selected-class="is-hidden">
              <div class="g__item w--5-12"><h4 class="zeta">
                #{msgs['jsf.NativeName.short']}</h4></div>
              <div class="g__item w--2-12"><h4 class="zeta">
                #{msgs['jsf.LocaleCode.short']}</h4></div>
              <div class="g__item w--2-12"><h4 class="zeta">
                #{msgs['jsf.LocaleAlias.short']}
                <i class="i i--info" title="#{msgs['jsf.LocaleAlias.tooltip']}"></i>
              </h4></div>
              <div class="g__item w--3-12"></div>
            </div>
            <div class="js-list-operation is-hidden"
              data-target-list="#settings-active-locales"
              data-none-selected-class="is-hidden">
              <zanata:ajax-command-link
                action="#{projectHome.removeSelectedLanguages()}"
                oncomplete="refreshStatistics()"
                styleClass="button--link link--danger"
                render="settings-languages-list">
                <f:facet name="loading">
                  <span class="txt--neutral">
                    #{msgs['jsf.project.DisableLanguages.inProgress.label']}
                  </span>
                </f:facet>
                <i class="i i--remove"></i>
                #{msgs['jsf.languages.DisableLanguages.short']}
              </zanata:ajax-command-link>

              <zanata:ajax-command-link
                action="#{projectHome.removeSelectedAliases}"
                styleClass="button--link link--danger l--push-left-half"
                render="settings-languages-list">
                <f:facet name="loading">
                  <span class="txt--neutral">
                    #{msgs['jsf.LocaleAlias.DeleteAliases.inProgress.label']}
                  </span>
                </f:facet>
                <i class="i i--trash"></i>
                #{msgs['jsf.LocaleAlias.DeleteAliases']}
              </zanata:ajax-command-link>
            </div>
          </div>
        </div>

        <!-- TODO fix style -->
        <div id="settings-active-locales-none" class="is-hidden">
          <h:outputText escape="false"
            value="#{msgs['jsf.languages.NoLanguagesMatchSearch']}" />
        </div>

        <ul id="settings-active-locales" class="list--slat list--highlight d--top"
          data-empty-results-indicator="#settings-active-locales-none">
          <ui:repeat value="#{projectHome.getInstanceActiveLocales()}" var="locale">

            <li class="reveal form__checkbox form__checkbox--spaced js-form__checkbox">

              <h:selectBooleanCheckbox
                value="#{projectHome.activeLocaleSelections[locale.localeId]}"
                styleClass="form__checkbox__input js-form__checkbox__input"/>

              <div class="js-form__checkbox__label l--pad-left-1half">
                <div class="g g--tight">
                  <div class="g__item w--5-12 w--1-s js-locale-name">
                    #{locale.retrieveDisplayName()}
                  </div>
                  <div class="g__item w--2-12 w--3-10-s">
                    <span class="txt--understated js-locale-id">#{locale.localeId}</span>
                  </div>
                  <div class="g__item w--2-12 w--3-10-s">
                    <span class="txt--understated js-locale-alias">
                      #{projectHome.getLocaleAlias(locale)}
                    </span>
                  </div>

                  <div class="g__item w--3-12 w--4-10-s l--pad-right-half txt--align-right txt--align-right-s">
                    <div id="language-actions-#{locale.localeId}"
                      class="l--push-right-quarter reveal__target">
                      <div class="dropdown dropdown--small dropdown--right dropdown--single js-dropdown">
                        <div class="button--group">
                          <zanata:ajax-command-button
                            oncomplete="refreshStatistics();"
                            action="#{projectHome.removeLanguage(locale.localeId)}"
                            styleClass="button button--small"
                            render="settings-languages-list">
                            #{msgs['jsf.languages.DisableLanguage.short']}
                          </zanata:ajax-command-button>
                          <button class="button button--small js-dropdown__toggle">
                            <i class="i i--arrow-down"></i>
                          </button>
                        </div>
                        <ul class="dropdown__content js-dropdown__content">
                          <s:fragment rendered="#{projectHome.getLocaleAlias(locale) == null}">
                            <li>
                              <h:outputLink id="addLocaleAliasLink"
                                styleClass="dropdown__content__link button--link i__item--left"
                                onclick="showLocaleAliasInput('#{locale.localeId}', '#{projectHome.getLocaleAlias(locale)}'); return false;"
                                value="#">
                                <i class="i i--plus i__item__icon"></i>
                                #{msgs['jsf.languages.AddAlias']}
                              </h:outputLink>
                            </li>
                          </s:fragment>
                          <s:fragment rendered="#{projectHome.getLocaleAlias(locale) != null}">
                            <li>
                              <h:outputLink id="editLocaleAliasLink"
                                styleClass="dropdown__content__link button--link i__item--left"
                                onclick="showLocaleAliasInput('#{locale.localeId}', '#{projectHome.getLocaleAlias(locale)}'); return false;"
                                value="#">
                                <i class="i i--edit i__item__icon"></i>
                                #{msgs['jsf.languages.EditAlias']}
                              </h:outputLink>
                            </li>
                          </s:fragment>
                          <s:fragment rendered="#{projectHome.getLocaleAlias(locale) != null}">
                            <li>
                              <button
                                class="dropdown__content__link button--link txt--danger i__item--left"
                                onclick="deleteLocaleAlias('#{locale.localeId}')">
                                <i class="i i--trash i__item__icon"></i>
                                #{msgs['jsf.languages.DeleteAlias']}
                              </button>
                            </li>
                          </s:fragment>
                        </ul>
                      </div>
                    </div>

                    <div id="language-processing-#{locale.localeId}"
                      class="is-hidden l--push-right-half">
                      <div id="set-alias-loader-#{locale.localeId}"
                        class="loader--small loader--inline l--push-left-half">
                        <span class="loader__spinner">
                          <span></span>
                          <span></span>
                          <span></span>
                        </span>
                      </div>
                    </div>

                    <div id="edit-alias-cancel-#{locale.localeId}"
                      class="is-hidden">
                      <button type="button"
                        onclick="hideLocaleAliasInput('#{locale.localeId}');showLocaleActions('#{locale.localeId}');return false;"
                        class="button--link l--float-right l--push-right-half">
                        #{msgs['jsf.Cancel']}
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <div class="l--pad-all-quarter bg--high is-hidden"
                   id="locale-alias-form-#{locale.localeId}">
                <!-- make for screenreader only -->
                <label for="locale-alias-input" class="is-sr-only">
                  #{msgs['jsf.localeAlias.SetLocaleAlias']}
                </label>
                <div class="form--inline">
                  <h:inputText id="locale-alias-input"
                    required="false"
                    value="#{projectHome.inputLocaleAliases[locale.localeId]}"
                    onkeydown="return onLocaleAliasInputKeyDown('#{locale.localeId}', event);"
                    maxlength="255"
                    styleClass="form--inline__input">
                    <rich:placeholder value="e.g. zh_CN"
                      styleClass="txt--neutral"/>
                  </h:inputText>
                  <div class="form--inline__suffix">
                    <a4j:commandButton
                      value="#{msgs['jsf.localeAlias.SetLocaleAlias.brief']}"
                      onbegin="hideLocaleAliasInput('#{locale.localeId}'); showLocaleAliasLoader('#{locale.localeId}'); zanata.loader.activate('#set-alias-loader-#{locale.localeId}');"
                      action="#{projectHome.updateLocaleAlias(locale.localeId)}"
                      oncomplete="zanata.loader.deactivate('#set-alias-loader-#{locale.localeId}'); showLocaleActions('#{locale.localeId}');"
                      render="settings-languages-list"
                      styleClass="form--inline__addon button--primary" />
                  </div>
                </div>
              </div>

            </li>
          </ui:repeat>
        </ul>
      </s:fragment>


      <ui:remove><!-- Available Locale list --></ui:remove>

      <hr/>
      <h3 class="heading--secondary">Available</h3>
      <!-- This uses ajax, which is problematic since it slows the search
      depending on network speed. It also means selections are cleared as soon
      as the filter is changed at all. Better to do it all locally.
      Perhaps I can make a component that does this (although that might
      duplicate the javascript). -->
      <zanata:text-search searchValue="#{projectHome.availableLocaleSearchQuery}"
        placeholder="Filter languages" render="availableLocaleResults"/>
      <div class="is-hidden--s l--pad-v-quarter">
        <zanata:select-all-checkbox label=""
          listSelector="#settings-available-locales"/>
        <div class="l--pad-left-1half">
          <div class="g g--tight js-list-operation"
            data-target-list="#settings-available-locales"
            data-any-selected-class="is-hidden">
            <div class="g__item w--5-12">
              <h4 class="zeta">#{msgs['jsf.NativeName.short']}</h4>
            </div>
            <div class="g__item w--2-12">
              <h4 class="zeta">#{msgs['jsf.LocaleCode.short']}</h4>
            </div>
            <div class="g__item w--5-12"></div>
          </div>
          <div class="js-list-operation is-hidden"
            data-target-list="#settings-available-locales"
            data-none-selected-class="is-hidden">
            <zanata:ajax-command-button
              action="#{projectHome.addSelectedAvailableLanguages}"
              styleClass="button--link link--success"
              render="settings-languages-list">
              <f:facet name="loading">
                <span class="txt--neutral">
                  ${msgs['jsf.languages.EnableLanguages.inProgress.label']}
                </span>
              </f:facet>
              <i class="i i--checkmark"></i>
              ${msgs['jsf.languages.EnableLanguages.label']}
            </zanata:ajax-command-button>
          </div>
        </div>
      </div>
      <a4j:outputPanel id="availableLocaleResults" ajaxRendered="true">
        <ul id="settings-available-locales" class="list--slat d--top">
          <ui:repeat value="#{projectHome.availableLocaleResults}"
            var="availableLocale">

            <li class="reveal form__checkbox form__checkbox--spaced js-form__checkbox">
              <!--<input type="checkbox" class="form__checkbox__input js-form__checkbox__input" name="form-checkbox"/>-->
              <h:selectBooleanCheckbox
                value="#{projectHome.availableLocaleSelections[availableLocale.localeId]}"
                styleClass="form__checkbox__input js-form__checkbox__input"/>
              <div class="js-form__checkbox__label l--pad-left-1half">
                <div class="g g--tight">
                  <div class="g__item w--5-12 w--1-s">
                    #{availableLocale.retrieveDisplayName()}
                  </div>
                  <div class="g__item w--2-12 w--3-10-s">
                    <span class="txt--understated">
                      #{availableLocale.localeId.id}
                    </span>
                  </div>
                  <div class="g__item w--5-12 w--7-10-s reveal__target txt--align-right txt--align-right-s">
                    <div class="dropdown dropdown--small dropdown--right dropdown--single js-dropdown">
                      <div class="button--group">
                        <zanata:ajax-command-button
                          oncomplete="refreshStatistics();"
                          action="#{projectHome.addLanguage(locale.localeId)}"
                          styleClass="button button--small"
                          render="settings-languages-list">
                          Enable
                        </zanata:ajax-command-button>
                      </div>
                      <ul class="dropdown__content js-dropdown__content">
                        <li><button class="dropdown__content__link button--link i__item--left"><i class="i i--plus i__item__icon"></i> Add alias</button></li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </li>

          </ui:repeat>
        </ul>
      </a4j:outputPanel>

      <!-- Placed at the end of the re-loaded panel so that it runs when all the
           new panel content from ajax is present in the DOM -->
      <script type="text/javascript">
        // refresh checkbox facades on language lists
        zanata.form.appendCheckboxes(jQuery('#settings-languages-list').element);
        // ensure active locales filter is applied correctly after items are refreshed */
        filterLocalesFromTextBox('#settings-languages-form\\:filter-active-locales-input', '#settings-active-locales');
      </script>
    </s:div>
  </h:form>
</li>
<li id="settings-translation">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.Translation']}
  </h2>

  <h:form id="settings-translation-form" styleClass="l--push-bottom-0">
    <h3 class="heading--secondary">#{msgs['jsf.Validation']}</h3>

    <p>#{msgs['jsf.Validation.messages']}</p>

    <s:div id="validation-list">
      <ul class="list--slat">
        <ui:repeat
          value="#{projectHome.validationList}" var="validationAction">
          <li class="js-example js-reveal">
            <div class="g--tight">
              <div class="g__item w--7-12">
                <label class="l--push-bottom-0">
                  #{validationAction.id.displayName}
                </label>

                <p class="txt--meta l--push-bottom-quarter">
                  #{validationAction.description}
                  <a href="#" class="button--link js-reveal__toggle"
                    data-target="##{validationAction.id.name()}-example"
                    data-toggle-title="#{msgs['jsf.tooltip.HideExample']}"
                    title="#{msgs['jsf.tooltip.ShowExample']}">
                    <span class="js-reveal__toggle__text"
                      data-toggle-value="Less">
                      #{msgs['jsf.tooltip.More']}
                    </span>…
                  </a>
                </p>
              </div>
              <div class="g__item w--5-12">
                <div class="button--group txt--align-right">
                  <ui:repeat value="#{projectHome.validationStates}"
                    var="state">
                    <s:fragment rendered="#{validationAction.state == state}">
                      <input name="#{validationAction.id.name()}"
                        id="#{validationAction.id.name()}-#{state}"
                        checked="true"
                        onchange="onValidationOptionChange(this.id)"
                        type="radio"
                        class="form__item__input js-example__setter"
                        data-example=""/>
                    </s:fragment>
                    <s:fragment rendered="#{validationAction.state != state}">
                      <input name="#{validationAction.id.name()}"
                        id="#{validationAction.id.name()}-#{state}"
                        onchange="onValidationOptionChange(this.id)"
                        type="radio"
                        class="form__item__input js-example__setter"
                        data-example=""/>
                    </s:fragment>
                    <label for="#{validationAction.id.name()}-#{state}"
                      class="button button--#{state.name() == 'Error'?'danger':state}">#{state}</label>
                  </ui:repeat>
                </div>
              </div>
            </div>
            <div class="g--tight l--push-bottom-half is-hidden"
              id="#{validationAction.id.name()}-example">
              <div class="g__item w--1-2 l--push-top-quarter">
                <h4 class="zeta heading--secondary txt--uppercase">
                  #{msgs['jsf.validation.source']}
                </h4>
              <pre class="l--push-all-0"><code class="txt--mini">
                <h:outputText value="#{validationAction.sourceExample}"
                  escape="false"/>
              </code></pre>
              </div>
              <div class="g__item w--1-2 l--push-top-quarter">
                <h4 class="zeta heading--secondary txt--uppercase">
                  #{msgs['jsf.validation.target']}
                </h4>
              <pre class="l--push-all-0"><code class="txt--mini">
                <h:outputText value="#{validationAction.targetExample}"
                  escape="false"/>
              </code></pre>
              </div>
            </div>
          </li>
        </ui:repeat>
      </ul>
    </s:div>
    <hr/>
    <h3 class="heading--secondary">#{msgs['jsf.CopyTrans']}</h3>

    <p>#{msgs['jsf.Copytrans.message']}
      <a href="http://zanata.org/help/reuse/copytrans-explained/"
        target="_blank"
        title="#{msgs['jsf.project.CopyTransOpts.tooltip']}">
        <i class="i i--help"></i>
      </a>
    </p>

    <p class="message--highlight">#{msgs['jsf.Copytrans.message2']}</p>
    <ui:include src="/WEB-INF/layout/copy_trans_inline.xhtml"/>
  </h:form>
</li>

<li id="settings-permissions">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.Permissions']}
  </h2>

  <h3 class="heading--secondary">#{msgs['jsf.Maintainers']}</h3>
  <h:form id="settings-permissions-form" styleClass="l--push-bottom-0">
    <ul id="maintainers-list"
      class="list--slat list--highlight l--push-top-half">
      <ui:repeat value="#{projectHome.getInstanceMaintainers()}"
        var="maintainer">
        <li class="reveal--list-item">
          <span class="w--r-1 bx--round l--push-right-quarter">
            <img alt="#{maintainer.account.username}"
              src="#{gravatarServiceImpl.getUserImageUrl(48, maintainer.email)}"/>
          </span> #{maintainer.name}
          <span class="txt--meta">@#{maintainer.account.username}</span>
          <a4j:commandLink
            id="remove-maintainer-button"
            action="#{projectHome.removeMaintainer(maintainer)}"
            oncomplete="zanata.form.appendCheckboxes(getUserRoleId())"
            styleClass="l--float-right txt--danger reveal__target"
            render="settings-permissions-form,maintainers-size,maintainers-form">
            <i class="i--large i--remove"></i>
          </a4j:commandLink>
        </li>
      </ui:repeat>

      <li class="list--highlight__item--none">
        <label
          for="#{rich:clientId('maintainerAutocomplete')}-autocomplete__input">
          #{msgs['jsf.AddAMaintainer']}
        </label>

        <zanata:autocomplete
          actionBean="#{projectHome.maintainerAutocomplete}"
          maxlength="80" minlength="3" id="maintainerAutocomplete"
          fetchValue="#{result.account.username}"
          render="settings-permissions-form,maintainers-size, maintainers-form"
          oncomplete="zanata.form.appendCheckboxes(getUserRoleId());focusCurrentActiveInput()"
          placeholder="#{msgs['jsf.SearchUsers']}">

          <span class="w--r-1 bx--round l--push-right-quarter">
            <img
              src="#{gravatarServiceImpl.getUserImageUrl(48, result.email)}"
              alt="#{result.name}"/>
          </span>#{result.name}
          <span
            class="txt--meta">@#{result.account.username}</span>
        </zanata:autocomplete>
      </li>
    </ul>
    <hr/>

    <s:div styleClass="l--push-bottom-half" id="user-roles">
      <zanata:checkbox label="#{msgs['jsf.RestrictRoleAccessMessage']}"
        onValueChanged="onRestrictedByRoleValueChanged"
        labelStyle="js-reveal__toggle l--push-bottom-0"
        styleClass="js-form__restricted-by-role"
        checked="#{projectHome.instance.isRestrictedByRoles()}"
        value="restrict-access"/>
      <s:div styleClass="bg--high l--pad-top-quarter l--pad-h-quarter"
        rendered="#{projectHome.instance.restrictedByRoles}">
        <ul class="g--tighter">
          <ui:repeat value="#{projectHome.availableRoles}" var="availableRole">
            <li class="g__item w--1-3 w--1-2-s">
              <zanata:checkbox label="#{availableRole.name}"
                onValueChanged="bindRestrictRoleValue"
                checked="#{projectHome.isRoleRestrictionEnabled(availableRole.name)}"
                value="#{availableRole.name}"/>
            </li>
          </ui:repeat>
        </ul>
      </s:div>
    </s:div>
  </h:form>
</li>
<li id="settings-webhooks" class="js-tabs-content">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
      #{msgs['jsf.project.WebHooks']}
  </h2>
  <h:form  id="settings-webhooks-list" onclick="return false">
    <ul class="list--slat list--highlight l--push-top-half">
      <ui:repeat value="#{projectHome.instance.webHooks}" var="webhook">
        <li class="list-item">
            #{webhook.url}
            <a4j:commandLink onbegin="onRemoveWebHook(this)"
              action="#{projectHome.removeWebHook(webhook)}"
              styleClass="l--float-right txt--danger"
              render="settings-webhooks-list">
              <i class="i--large i--remove"></i>
              <zanata:loader layout="inline" type="loader--small"
                jsHandle="true" id="loader" visible="false"/>
            </a4j:commandLink>
        </li>
      </ui:repeat>
      <zanata:loader id="add-url-loader" type="loader--large" visible="false"/>
      <li class="list--highlight__item--none">
        <label for="payloadUrlInput">
          #{msgs['jsf.project.AddWebhook']}
        </label>

        <div class="form--inline">
          <input type="text" id="payloadUrlInput" autocomplete="off"
            placeholder="#{msgs['jsf.project.PayloadURL']}"
            onkeydown="onPayloadInputKeyDown(this, event)"
            class="form--inline__input"/>

          <div class="form--inline__suffix">
            <button class="form--inline__addon button--primary"
              onclick="addWebhook(jQuery('#payloadUrlInput').val())">
              #{msgs['jsf.project.AddWebhook']}
            </button>
          </div>
        </div>
      </li>
    </ul>
  </h:form>
</li>

<li id="settings-about" class="js-tabs-content">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.project.About']}
  </h2>

  <p class="message--highlight">
    #{msgs['jsf.project.about.message']}
  </p>
  <h:form id="settings-about-form" styleClass="l--push-bottom-0">

    <h:inputTextarea id="homeContent" required="false" rows="10"
      value="#{projectHome.instance.homeContent}">
    </h:inputTextarea>

    <p class="txt--meta">
      <h:outputText value="#{msgs['jsf.project.about.markup']}"
        escape="false"/>
    </p>

    <a4j:commandLink value="#{msgs['jsf.project.saveNotes']}"
      action="#{projectHome.update}" rendered="#{projectHome.managed}"
      render="project-about"
      styleClass="l--push-top-1 button button--primary"/>
  </h:form>
</li>
</ul>
</div>
</ui:composition>
