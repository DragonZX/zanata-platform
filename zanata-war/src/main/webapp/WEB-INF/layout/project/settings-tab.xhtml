<ui:composition xmlns="http://www.w3.org/1999/xhtml"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:a4j="http://richfaces.org/a4j"
  xmlns:rich="http://richfaces.org/rich"
  xmlns:s="http://jboss.org/schema/seam/taglib"
  xmlns:f="http://java.sun.com/jsf/core"
  xmlns:zanata="http://java.sun.com/jsf/composite/zanata">

<script type="text/javascript">
  function onValidationOptionChange(validationId) {
    var value = validationId.split('-');
    bindValidationValue(value[0], value[1]);
  }

  function onRestrictedByRoleValueChanged(key, checked) {
    bindRestrictedByRoleValue(key, checked);
  }

  function getUserRoleId() {
    return "[id='#{rich:clientId('user-roles')}']";
  }

  function onPayloadInputKeyDown(input, event) {
      if(event.keyCode === 13) {
        event.preventDefault();
        if(jQuery(input).val()) {
          addWebhook(jQuery(input).val());
        }
        return false;
      }
  }

  function onRemoveWebHook(ele) {
    jQuery(ele).children('i').addClass('is-hidden');
    zanata.loader.activate(jQuery(ele).children('#loader'));
  }

  function showLocaleAliasInput(localeId, currentAlias) {
    var input = localeAliasInput(localeId);
    input.val(currentAlias);
    localeAliasForm(localeId).removeClass('is-hidden');
    showLocaleAliasCancelEdit(localeId);
    input.focus();
  }

  function hideLocaleAliasInput(localeId) {
    localeAliasForm(localeId).addClass('is-hidden');
  }

  function localeAliasForm(localeId) {
    var id = '#locale-alias-form-' + localeId;
    return jQuery(id);
  }

  function localeAliasInput(localeId) {
    return localeAliasForm(localeId).find('input:text');
  }

  function onLocaleAliasInputKeyDown(localeId, event) {
    if (event.keyCode === 13) {
      event.preventDefault();
      var aliasForm = localeAliasForm(localeId);
      var submitButton = aliasForm.find('input:submit');
      submitButton.click();
      return false;
    }
  }

  function showLocaleActions(localeId) {
    var localeActions = '#language-actions-' + localeId;
    showOnlyOneOfLocaleActionStatus(localeId)(localeActions)
  }
  function showLocaleAliasLoader(localeId) {
    var aliasLoader = '#language-processing-' + localeId;
    showOnlyOneOfLocaleActionStatus(localeId)(aliasLoader)
  }
  function showLocaleAliasCancelEdit(localeId) {
    var cancelEdit = '#edit-alias-cancel-' + localeId;
    showOnlyOneOfLocaleActionStatus(localeId)(cancelEdit)
  }

  // FIXME do this with children of an element rather than specifying all manually by id
  function showOnlyOneOfLocaleActionStatus (localeId) {
    return showOnlyOneOf('#language-actions-' + localeId,
                         '#language-processing-' + localeId,
                         '#edit-alias-cancel-' + localeId)
  }

  /**
   * Given any number of jQuery selectors, returns a function that will reveal
   * a given element and ensure that all other selectors passed to this function
   * are hidden.
   */
  function showOnlyOneOf() {
    var i, selectors = Array.prototype.slice.call(arguments);
    return function (show) {
      selectors.forEach(function (selector) {
        jQuery(selector).addClass('is-hidden');
      });
      jQuery(show).removeClass('is-hidden');
    }
  }




  // FIXME all of this should move to assets soon.

  // The list should be found and parsed each time so that refreshing items
  // will not mess it up. Problem if the elements to show and hide are reloaded
  // through ajax, behaviour would not be attached.

  // zanata-assets tabs.js does like:

  // $('.js-foo') and attaches its behaviour.

  // my only problem is the ajax refresh. There may be a solution on this answer
  // http://stackoverflow.com/a/17683987/297938 which suggests delegating the
  // events to a static ancestor - not easy to do in a general way for all ajax
  // areas, but maybe with an additional option for the element that should handle
  // the actual events.
  // This answer http://stackoverflow.com/a/13767985/297938 shows probably the
  // same thing. I could just make a class that indicates that something is a
  // static element, and have the code search up from the element that wants the
  // behaviour for the first thing tagged as a static element. I presume it
  // would be faster the more specific it is - the fallback would be the document.

  $(document).ready(initListOperations);


  /**
   * Attach events for controlling visibility of elements in response to list
   * selections.
   */
  function initListOperations() {
    var $ = jQuery;

    // select .js-list-operation (list operations apply to items in lists, so will
    //                            be valid for some selection states only)
    $('.js-list-operation').each(bindOperationToList);

    function bindOperationToList (index, element) {
      // find data-target-list as the element that will determine the selection state
      var targetListSelector = $(this).data('target-list');
      var targetList = $(targetListSelector);
      console.log('used selector %s to find %o', targetListSelector, targetList);

      // search up from the list operation to find .js-static-element
      // FIXME this is triggering when anywhere on the form is clicked
      var eventHolder = $(this).closest('.js-static-element'); // closest includes itself in the search
      console.log('found static element %o', eventHolder)
      eventHolder.on('click', targetListSelector, delayedTriggerListRecheck);

      function delayedTriggerListRecheck () {
        console.log('delayedTriggerListRecheck');
        setTimeout(triggerListRecheck, 20);
      }

      // attach event to selection of any list item
      //   event:
      //     - figure out how many items are in the list vs. selected
      //     - generate boolean for each selection category (none, one, some, any, all)
      //     - add or remove classes that are listed in the data attributes of
      //       the .js-list-operation.
      // This would be best in zanata-assets/src/assets/js/components.form.js
      // extend around :145 where it actually sets the selected class... or not.
      // probably in setCheckRadioStatus since that is where the class is actually
      // toggled, so it is easy to make sure the value is ready.

      // temporarily, I will just add another click event with a setTimeout so
      // that it will happen after the class setting.
      // $(this).closest('.js-static-element')
      //        .on('click', '.js-form__checkbox', function (e) {
      //           var clickedElement = $(this);
      //           if (targetList.children().is(clickedElement)) {
      //             setTimeout(function () {
      //               // check all the element selection states on the list.
      //               // only do so for visible elements
      //               console.log('Triggering list recheck, not sure if I am calling this right.');
      //               triggerListRecheck();
      //             }, 20); // FIXME definitely don't want to really have this much delay (fix it when code is incorporated into place that changes the state, so I can get the timing right).
      //           }
      //         });

      function triggerListRecheck() {
        console.log('this is a list recheck');
        // look at all the items in the list to see their selection thingy.
        var totalElements = targetList.children().size();
        var selectedElements = targetList.children('.is-checked').size();

        console.log('found %i elements selected out of %i', selectedElements, totalElements);

        var none = selectedElements === 0;
        var one = selectedElements === 1;
        var multiple = selectedElements &gt; 1;

        // wait, is it the greater-than sign that is making it think I have closed something?

        // jsf fails if I use the short-circuit AND operator - it thinks I am
        // trying to make an xml entity. Stupid thing.
        // var some = (selectedElements &gt; 0 ? selectedElements &lt; totalElements : false);
        var some = selectedElements &gt; 0 &amp;&amp; selectedElements &lt; totalElements;
        var any = selectedElements &gt; 0;
        var all = selectedElements === totalElements;

        console.log('none: %s, one: %s, multiple: %s, some: %s, any: %s, all: %s', none, one, multiple, some, any, all);




        // All the attributes...
        // The class given as the attribute will be present when the condition
        // is matched, and will be absent when the condition is not matched
        // (with the exception of higher precedence rules overriding).
        // The other thing I could do is just make multiple attributes with the
        // same class count as AND or OR. That would get around precendence.
        // AND might not be so useful, OR is probably best.


// none || some = !all
// none || one is unique
// any AND !one = multiple




        // data-none-selected-class=""
        // data-one-selected-class=""
        // data-multiple-selected-class=""
        // data-some-selected-class=""
        // data-any-selected-class=""
        // data-all-selected-class=""

        // data-not-none-selected-class="" (== any-selected)
        // data-not-one-selected-class=""
        // data-not-multiple-selected-class=""
        // data-not-some-selected-class=""
        // data-not-any-selected-class=""  (== none-selected)
        // data-not-all-selected-class=""

        // e.g. some not-one


        // TODO ensure classes are applied in the correct order so that their
        //      precedence is correct.



        // Then a bunch of if statements or something to deal with the
        // actual setting of classes on some elements.

        var $element = $(element)

        console.log('dealing with element %o', element);

        // if they have the data attribute, one of the 2 toggle operations will
        // be happening, otherwise nothing.


        function checkCondition(condition, state) {
          if ($element.attr('data-' + condition + '-selected-class')) {
            $element.toggleClass($element.data(condition + '-selected-class'),
              state);
          }
          if ($element.attr('data-not-' + condition + '-selected-class')) {
            $element.toggleClass($element.data('not-' + condition + '-selected-class'),
              !state);
          }
        }

        // TODO could put these in a map (string to boolean) and just iterate the
        //      map keys.
        checkCondition('none', none);
        checkCondition('one', one);
        checkCondition('multiple', multiple);
        checkCondition('some', some);
        checkCondition('any', any);
        checkCondition('all', all);


        // if (none) {
        //   if ($element.attr('data-none-selected-add-class'))
        // }

        // // element is the element to do it to
        // if ($element.attr('data-foobar') || $element.attr('data-antifoobar')) {
        // }
      }

    }


    //complication: if something has conflicting rules, such as add 'is-hidden'
    //              for one, and remove 'is-hidden' for any (both triggered by
    //              one selected), what takes precedence?
    //    Could make a specific hierarchy:
    //     - none is mutually exclusive from all the others, so no probalo
    //     - one is very specific, so it should win over everything else
    //     - some and all are mutually exclusive, so either can be between any
    //       and some
    //     - any is most general, it should be last
  }




</script>

<a4j:jsFunction name="addWebhook"
  onbegin="zanata.loader.activate('#add-url-loader')"
  oncomplete="zanata.loader.deactivate('#add-url-loader');"
  action="#{projectHome.addWebHook(url)}"
  render="settings-webhooks-list">
  <a4j:param name="val1" assignTo="#{url}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindValidationValue"
  action="#{projectHome.updateValidationOption(name, state)}"
  render="validation-list">
  <a4j:param name="val1" assignTo="#{name}"/>
  <a4j:param name="val2" assignTo="#{state}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindCopyTransValue"
  action="#{projectHome.updateCopyTrans(action, value)}">
  <a4j:param name="val1" assignTo="#{action}"/>
  <a4j:param name="val2" assignTo="#{value}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindRestrictedByRoleValue" render="user-roles"
  oncomplete="zanata.form.appendCheckboxes(getUserRoleId())"
  action="#{projectHome.setRestrictedByRole(key, checked)}">
  <a4j:param name="val1" assignTo="#{key}"/>
  <a4j:param name="val2" assignTo="#{checked}"/>
</a4j:jsFunction>

<a4j:jsFunction name="bindRestrictRoleValue"
  action="#{projectHome.updateRoles(roleName, isRestricted)}">
  <a4j:param name="val1" assignTo="#{roleName}"/>
  <a4j:param name="val2" assignTo="#{isRestricted}"/>
</a4j:jsFunction>

<h1>#{msgs['jsf.project.ProjectSettings']}</h1>

<div class="tabs--vertical js-tabs">
<ul class="tabs__nav js-tabs-nav">
  <li>
    <a id="settings-general_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/general"
      class="js-url-mod is-active" data-content="#settings-general">
      <i class="i i--settings"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.General']}</span>
    </a>
  </li>
  <li>
    <a id="settings-languages_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/languages"
      class="js-url-mod" data-content="#settings-languages">
      <i class="i i--language"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.Languages']}</span>
    </a>
  </li>
  <li>
    <a id="settings-translation_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/translation"
      class="js-url-mod" data-content="#settings-translation">
      <i class="i i--translate"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.Translation']}</span>
    </a>
  </li>
  <li>
    <a id="settings-permissions_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/permissions"
      class="js-url-mod" data-content="#settings-permissions">
      <i class="i i--users"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.Permissions']}</span>
    </a>
  </li>
  <li>
    <a id="settings-webhooks_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/webhooks"
      class="js-url-mod" data-content="#settings-webhooks">
      <i class="i i--source"></i>
      <span class="is-hidden--m-l-down">#{msgs['jsf.project.WebHooks']}</span>
    </a>
  </li>
  <li>
    <a id="settings-about_tab"
      href="#{request.contextPath}/project/view/#{projectHomeAction.slug}/settings/about"
      class="js-url-mod" data-content="#settings-about">
      <i class="i i--info"></i>
          <span
            class="is-hidden--m-l-down">#{msgs['jsf.project.About']}</span>
    </a>
  </li>
</ul>
<ul class="tabs__content js-tabs-content">
<li class="is-active" id="settings-general">
  <h2 class="l--push-all-0 gamma d--bottom">#{msgs['jsf.General']}</h2>
  <h:form id="settings-general-form" styleClass="l--constrain-large">
    <ui:include src="edit_form.xhtml"/>

    <h3 class="heading--secondary">#{msgs['jsf.project.SourceCode']}</h3>

    <div class="g--tight l--push-top-half">
      <div class="g__item w--1-2">
        <div class="form__item">
          <h:outputLabel for="homePage">#{msgs['jsf.project.HomePage']}
            <span class="txt--meta">#{msgs['jsf.field.optional']}</span>
          </h:outputLabel>
          <s:decorate id="homePageField" template="../field.xhtml">
            <h:inputText id="homePage" required="false"
              value="#{projectHome.instance.sourceViewURL}">
              <rich:placeholder value="http://" styleClass="txt--neutral"/>
              <a4j:ajax event="blur" render="homePageField" execute="@this"/>
            </h:inputText>
          </s:decorate>

          <p class="txt--meta">
            <h:outputText escape="false"
              value="#{msgs['jsf.Project.sourceurl.message']}"/>
          </p>
        </div>
      </div>
      <div class="g__item w--1-2">
        <div class="form__item">
          <h:outputLabel for="repo">#{msgs['jsf.field.repository']}
            <span class="txt--meta">#{msgs['jsf.field.optional']}</span>
          </h:outputLabel>
          <s:decorate id="repoField" template="../field.xhtml">
            <h:inputText id="repo" required="false"
              value="#{projectHome.instance.sourceCheckoutURL}">
              <a4j:ajax event="blur" render="repoField" execute="@this"/>
            </h:inputText>
          </s:decorate>

          <p class="txt--meta">
            <h:outputText
              escape="false" value="#{msgs['jsf.Project.repo.message']}"/>
          </p>
        </div>
      </div>
    </div>

    <div class="l--push-top-1">
      <a4j:commandLink value="#{msgs['jsf.UpdateGeneralSettings']}"
        id="button-update-settings"
        action="#{projectHome.update}"
        rendered="#{projectHome.managed}"
        render="project-info"
        styleClass="l--push-right-half button--primary"/>
    </div>
    <hr/>
    <s:div styleClass="g--tight" id="status">
      <s:div styleClass="g__item w--1-2 l--push-bottom-1"
        rendered="#{projectHome.instance.status eq 'ACTIVE'}">
        <a4j:commandLink styleClass="button--warning l--push-bottom-half"
          id="button-lock-project"
          action="#{projectHome.updateStatus('R')}" render="status">
          <i
            class="i--left i--lock"></i> #{msgs['jsf.project.readonly']}
        </a4j:commandLink>

        <p class="txt--meta">#{msgs['jsf.project.readonly.Message']}</p>
      </s:div>
      <s:div styleClass="g__item w--1-2 l--push-bottom-1"
        rendered="#{projectHome.instance.status ne 'ACTIVE'}">
        <s:fragment rendered="#{projectHome.instance.status eq 'OBSOLETE'}">
          <button class="button--success l--push-bottom-half"
            disabled="true">
            <i class="i--left i--lock"></i>
            #{msgs['jsf.project.writable']}
          </button>
        </s:fragment>
        <a4j:commandLink styleClass="button--success l--push-bottom-half"
          id="button-unlock-project"
          rendered="#{projectHome.instance.status == 'READONLY'}"
          action="#{projectHome.updateStatus('A')}" render="status">
          <i
            class="i--left i--lock"></i> #{msgs['jsf.project.writable']}
        </a4j:commandLink>

        <p class="txt--meta">#{msgs['jsf.project.writable.Message']}</p>
      </s:div>

      <s:fragment
        rendered="#{s:hasPermission(projectHome.instance, 'mark-obsolete')}">
        <s:div styleClass="g__item w--1-2"
          rendered="#{projectHome.instance.status eq 'OBSOLETE'}">
          <a4j:commandLink styleClass="button--success l--push-bottom-half"
            id="button-unarchive-project"
            action="#{projectHome.updateStatus('A')}" render="status">
            <i class="i--left i--archive"></i>
            #{msgs['jsf.UnArchiveThisProject']}
          </a4j:commandLink>

          <p class="txt--meta">#{msgs['jsf.UnarchiveProject.Message']}</p>
        </s:div>
        <s:div styleClass="g__item w--1-2"
          rendered="#{projectHome.instance.status ne 'OBSOLETE'}">
          <a4j:commandLink styleClass="button--danger l--push-bottom-half"
            id="button-archive-project"
            action="#{projectHome.updateStatus('O')}" render="status">
            <i class="i--left i--archive"></i>
            #{msgs['jsf.ArchiveThisProject']}
          </a4j:commandLink>

          <p class="txt--meta">#{msgs['jsf.ArchiveProject.Message']}</p>
        </s:div>
      </s:fragment>
    </s:div>
  </h:form>
</li>
<li id="settings-languages" class="js-static-element">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.Languages']}
  </h2>
  <h:form id="settings-languages-form" styleClass="l--push-bottom-0">
    <s:div id="settings-languages-list">

      <button styleClass="button--small l--push-bottom-half" jsfc="a4j:commandButton"
        value="#{msgs['jsf.Language.useGlobal']}"
        rendered="#{projectHome.instance.overrideLocales}"
        action="#{projectHome.updateLanguagesFromGlobal()}"
        render="settings-languages-list"/>

      <button jsfc="a4j:commandButton"
        styleClass="button--small l--push-bottom-half l--push-left-half"
        value="#{msgs['jsf.localeAlias.RemoveAllAliases']}"
        rendered="#{not empty projectHome.instance.localeAliases}"
        action="#{projectHome.instance.localeAliases.clear()}"
        render="settings-languages-list"/>

      <h3 class="heading--secondary">#{msgs['jsf.Enabled']}</h3>

      <div class="w--5-12 form--search js-form--search">
        <label class="is-sr-only">#{msgs['jsf.languages.FilterLanguages']}</label>
        <!-- TODO make this filter the list -->
        <input type="search"
          placeholder="#{msgs['jsf.languages.FilterLanguages']}"
          class="form--search__input js-form--search__input l--push-bottom-quarter" />
        <!-- TODO make this clear the filter textbox -->
        <button
          class="button--link form--search__clear js-form--search__clear is-hidden">
          <i class="i i--remove"></i>
        </button>
      </div>

      <div class="is-hidden--s l--pad-v-quarter">
        <div class="form__checkbox js-form__checkbox">
          <!-- TODO select all enabled languages on click -->
          <input type="checkbox"
            class="form__checkbox__input js-form__checkbox__input"
            name="form-checkbox"/>
        </div>
        <div class="l--pad-left-1half">
          <!-- TODO check if this should be hidden when any enabled languages are selected -->
          <div class="g g--tight js-list-operation"
            data-target-list="#settings-active-locales"
            data-any-selected-class="is-hidden">
            <div class="g__item w--5-12"><h4 class="zeta">
              #{msgs['jsf.NativeName.short']}</h4></div>
            <div class="g__item w--2-12"><h4 class="zeta">
              #{msgs['jsf.LocaleCode.short']}</h4></div>
            <div class="g__item w--2-12"><h4 class="zeta">
              #{msgs['jsf.LocaleAlias.short']}
              <i class="i i--info" title="#{msgs['jsf.LocaleAlias.tooltip']}"></i>
            </h4></div>
            <div class="g__item w--3-12"></div>
          </div>
          <!-- TODO show when any enabled languages selected -->
          <div class="js-list-operation is-hidden"
            data-target-list="#settings-active-locales"
            data-none-selected-class="is-hidden">
            <!-- TODO remove selected languages on click -->
            <button class="button--link link--danger">
              <i class="i i--remove"></i>
              #{msgs['jsf.languages.DisableLanguages.short']}
            </button>
            <!-- TODO remove aliases for selected languages on click -->
            <button class="button--link link--danger l--push-left-half">
              <i class="i i--trash"></i>
              #{msgs['jsf.LocaleAlias.DeleteAliases']}
            </button>
          </div>
        </div>
      </div>


      <ul id="settings-active-locales" class="list--slat list--highlight d--top">
        <ui:repeat value="#{projectHome.getInstanceActiveLocales()}" var="locale">

          <!-- TODO might want to add an entity to bind to all these properties in the row -->

          <li class="reveal form__checkbox form__checkbox--spaced js-form__checkbox">
            <input type="checkbox"
              class="form__checkbox__input js-form__checkbox__input"
              name="form-checkbox-#{locale.localeId}"/>
            <div class="js-form__checkbox__label l--pad-left-1half">
              <div class="g g--tight">
                <div class="g__item w--5-12 w--1-s">
                  #{locale.retrieveDisplayName()}
                </div>
                <div class="g__item w--2-12 w--3-10-s">
                  <span class="txt--understated">#{locale.localeId}</span>
                </div>
                <div class="g__item w--2-12 w--3-10-s">
                  <span class="txt--understated">
                    #{projectHome.getLocaleAlias(locale)}
                  </span>
                </div>

                <div class="g__item w--3-12 w--4-10-s l--pad-right-half txt--align-right txt--align-right-s">
                  <div id="language-actions-#{locale.localeId}"
                    class="l--push-right-quarter reveal__target">
                    <div class="dropdown dropdown--small dropdown--right dropdown--single js-dropdown">
                      <div class="button--group">
                        <!-- TODO make this button disable the language -->
                        <button class="button button--small">
                          #{msgs['jsf.languages.DisableLanguage.short']}
                        </button>
                        <button class="button button--small js-dropdown__toggle">
                          <i class="i i--arrow-down"></i>
                        </button>
                      </div>
                      <ul class="dropdown__content js-dropdown__content">
                        <!-- TODO make the next two buttons open the alias edit form -->
                        <s:fragment rendered="#{projectHome.getLocaleAlias(locale) == null}">
                          <li>
                            <h:outputLink id="addLocaleAliasLink"
                              styleClass="dropdown__content__link button--link i__item--left"
                              onclick="showLocaleAliasInput('#{locale.localeId}', '#{projectHome.getLocaleAlias(locale)}'); return false;"
                              value="#">
                              <i class="i i--plus i__item__icon"></i>
                              #{msgs['jsf.languages.AddAlias']}
                            </h:outputLink>
                          </li>
                        </s:fragment>
                        <s:fragment rendered="#{projectHome.getLocaleAlias(locale) != null}">
                          <li>
                            <h:outputLink id="editLocaleAliasLink"
                              styleClass="dropdown__content__link button--link i__item--left"
                              onclick="showLocaleAliasInput('#{locale.localeId}', '#{projectHome.getLocaleAlias(locale)}'); return false;"
                              value="#">
                              <i class="i i--edit i__item__icon"></i>
                              #{msgs['jsf.languages.EditAlias']}
                            </h:outputLink>
                          </li>
                        </s:fragment>
                        <s:fragment rendered="#{projectHome.getLocaleAlias(locale) != null}">
                          <li>
                            <!-- TODO make this remove the alias -->
                            <button class="dropdown__content__link button--link txt--danger i__item--left">
                              <i class="i i--trash i__item__icon"></i>
                              #{msgs['jsf.languages.DeleteAlias']}
                            </button>
                          </li>
                        </s:fragment>
                      </ul>
                    </div>
                  </div>

                  <div id="language-processing-#{locale.localeId}"
                    class="is-hidden l--push-right-half">
                    <div id="set-alias-loader-#{locale.localeId}"
                      class="loader--small loader--inline l--push-left-half">
                      <span class="loader__spinner">
                        <span></span>
                        <span></span>
                        <span></span>
                      </span>
                    </div>
                  </div>

                  <div id="edit-alias-cancel-#{locale.localeId}"
                    class="is-hidden">
                    <button type="button"
                      onclick="hideLocaleAliasInput('#{locale.localeId}');showLocaleActions('#{locale.localeId}');return false;"
                      class="button--link l--float-right l--push-right-half">
                      #{msgs['jsf.Cancel']}
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- TODO this looks a bit out-of-place, needs fix -->
            <div class="l--pad-all-quarter bg--high is-hidden"
                 id="locale-alias-form-#{locale.localeId}">
              <!-- make for screenreader only -->
              <label for="locale-alias-input" class="is-sr-only">
                #{msgs['jsf.localeAlias.SetLocaleAlias']}
              </label>
              <div class="form--inline">
                <h:inputText id="locale-alias-input"
                  required="false"
                  value="#{projectHome.inputLocaleAliases[locale.localeId]}"
                  onkeydown="return onLocaleAliasInputKeyDown('#{locale.localeId}', event);"
                  maxlength="255"
                  styleClass="form--inline__input">
                  <rich:placeholder value="e.g. zh_CN"
                    styleClass="txt--neutral"/>
                </h:inputText>
                <div class="form--inline__suffix">
                  <a4j:commandButton
                    value="#{msgs['jsf.localeAlias.SetLocaleAlias.brief']}"
                    onbegin="hideLocaleAliasInput('#{locale.localeId}'); showLocaleAliasLoader('#{locale.localeId}'); zanata.loader.activate('#set-alias-loader-#{locale.localeId}');"
                    action="#{projectHome.updateLocaleAlias(locale.localeId)}"
                    oncomplete="zanata.loader.deactivate('#set-alias-loader-#{locale.localeId}'); showLocaleActions('#{locale.localeId}');"
                    render="settings-languages-list"
                    styleClass="form--inline__addon button--primary" />
                </div>
              </div>
            </div>

          </li>
        </ui:repeat>
      </ul>


      <!-- TODO add disabled section -->
      <!-- TODO move the "add default languages" next to filter for disabled -->


      <!-- TODO move alias input to new section -->
      <ul class="list--slat list--highlight l--push-top-half">
        <li class="list--highlight__item--none">

          <label
            for="#{rich:clientId('languageAutocomplete')}-autocomplete__input">
            #{msgs['jsf.AddALanguage']}
          </label>

          <zanata:autocomplete
            actionBean="#{projectHome.localeAutocomplete}"
            maxlength="80" searchWhenFocus="true"
            id="languageAutocomplete"
            fetchValue="#{result.localeId}"
            render="settings-languages-list"
            oncomplete="refreshStatistics();focusCurrentActiveInput()"
            placeholder="#{msgs['jsf.language.search.placeholder']}">

            #{result.retrieveDisplayName()}<span
            class="txt--understated l--push-left-quarter">[#{result.localeId}]</span>
          </zanata:autocomplete>

        </li>
      </ul>
    </s:div>
  </h:form>
</li>
<li id="settings-translation">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.Translation']}
  </h2>

  <h:form id="settings-translation-form" styleClass="l--push-bottom-0">
    <h3 class="heading--secondary">#{msgs['jsf.Validation']}</h3>

    <p>#{msgs['jsf.Validation.messages']}</p>

    <s:div id="validation-list">
      <ul class="list--slat">
        <ui:repeat
          value="#{projectHome.validationList}" var="validationAction">
          <li class="js-example js-reveal">
            <div class="g--tight">
              <div class="g__item w--7-12">
                <label class="l--push-bottom-0">
                  #{validationAction.id.displayName}
                </label>

                <p class="txt--meta l--push-bottom-quarter">
                  #{validationAction.description}
                  <a href="#" class="button--link js-reveal__toggle"
                    data-target="##{validationAction.id.name()}-example"
                    data-toggle-title="#{msgs['jsf.tooltip.HideExample']}"
                    title="#{msgs['jsf.tooltip.ShowExample']}">
                    <span class="js-reveal__toggle__text"
                      data-toggle-value="Less">
                      #{msgs['jsf.tooltip.More']}
                    </span>…
                  </a>
                </p>
              </div>
              <div class="g__item w--5-12">
                <div class="button--group txt--align-right">
                  <ui:repeat value="#{projectHome.validationStates}"
                    var="state">
                    <s:fragment rendered="#{validationAction.state == state}">
                      <input name="#{validationAction.id.name()}"
                        id="#{validationAction.id.name()}-#{state}"
                        checked="true"
                        onchange="onValidationOptionChange(this.id)"
                        type="radio"
                        class="form__item__input js-example__setter"
                        data-example=""/>
                    </s:fragment>
                    <s:fragment rendered="#{validationAction.state != state}">
                      <input name="#{validationAction.id.name()}"
                        id="#{validationAction.id.name()}-#{state}"
                        onchange="onValidationOptionChange(this.id)"
                        type="radio"
                        class="form__item__input js-example__setter"
                        data-example=""/>
                    </s:fragment>
                    <label for="#{validationAction.id.name()}-#{state}"
                      class="button button--#{state.name() == 'Error'?'danger':state}">#{state}</label>
                  </ui:repeat>
                </div>
              </div>
            </div>
            <div class="g--tight l--push-bottom-half is-hidden"
              id="#{validationAction.id.name()}-example">
              <div class="g__item w--1-2 l--push-top-quarter">
                <h4 class="zeta heading--secondary txt--uppercase">
                  #{msgs['jsf.validation.source']}
                </h4>
              <pre class="l--push-all-0"><code class="txt--mini">
                <h:outputText value="#{validationAction.sourceExample}"
                  escape="false"/>
              </code></pre>
              </div>
              <div class="g__item w--1-2 l--push-top-quarter">
                <h4 class="zeta heading--secondary txt--uppercase">
                  #{msgs['jsf.validation.target']}
                </h4>
              <pre class="l--push-all-0"><code class="txt--mini">
                <h:outputText value="#{validationAction.targetExample}"
                  escape="false"/>
              </code></pre>
              </div>
            </div>
          </li>
        </ui:repeat>
      </ul>
    </s:div>
    <hr/>
    <h3 class="heading--secondary">#{msgs['jsf.CopyTrans']}</h3>

    <p>#{msgs['jsf.Copytrans.message']}
      <a href="http://zanata.org/help/reuse/copytrans-explained/"
        target="_blank"
        title="#{msgs['jsf.project.CopyTransOpts.tooltip']}">
        <i class="i i--help"></i>
      </a>
    </p>

    <p class="message--highlight">#{msgs['jsf.Copytrans.message2']}</p>
    <ui:include src="/WEB-INF/layout/copy_trans_inline.xhtml"/>
  </h:form>
</li>

<li id="settings-permissions">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.Permissions']}
  </h2>

  <h3 class="heading--secondary">#{msgs['jsf.Maintainers']}</h3>
  <h:form id="settings-permissions-form" styleClass="l--push-bottom-0">
    <ul id="maintainers-list"
      class="list--slat list--highlight l--push-top-half">
      <ui:repeat value="#{projectHome.getInstanceMaintainers()}"
        var="maintainer">
        <li class="reveal--list-item">
          <span class="w--r-1 bx--round l--push-right-quarter">
            <img alt="#{maintainer.account.username}"
              src="#{gravatarServiceImpl.getUserImageUrl(48, maintainer.email)}"/>
          </span> #{maintainer.name}
          <span class="txt--meta">@#{maintainer.account.username}</span>
          <a4j:commandLink
            id="remove-maintainer-button"
            action="#{projectHome.removeMaintainer(maintainer)}"
            oncomplete="zanata.form.appendCheckboxes(getUserRoleId())"
            styleClass="l--float-right txt--danger reveal__target"
            render="settings-permissions-form,maintainers-size,maintainers-form">
            <i class="i--large i--remove"></i>
          </a4j:commandLink>
        </li>
      </ui:repeat>

      <li class="list--highlight__item--none">
        <label
          for="#{rich:clientId('maintainerAutocomplete')}-autocomplete__input">
          #{msgs['jsf.AddAMaintainer']}
        </label>

        <zanata:autocomplete
          actionBean="#{projectHome.maintainerAutocomplete}"
          maxlength="80" minlength="3" id="maintainerAutocomplete"
          fetchValue="#{result.account.username}"
          render="settings-permissions-form,maintainers-size, maintainers-form"
          oncomplete="zanata.form.appendCheckboxes(getUserRoleId());focusCurrentActiveInput()"
          placeholder="#{msgs['jsf.SearchUsers']}">

          <span class="w--r-1 bx--round l--push-right-quarter">
            <img
              src="#{gravatarServiceImpl.getUserImageUrl(48, result.email)}"
              alt="#{result.name}"/>
          </span>#{result.name}
          <span
            class="txt--meta">@#{result.account.username}</span>
        </zanata:autocomplete>
      </li>
    </ul>
    <hr/>

    <s:div styleClass="l--push-bottom-half" id="user-roles">
      <zanata:checkbox label="#{msgs['jsf.RestrictRoleAccessMessage']}"
        onValueChanged="onRestrictedByRoleValueChanged"
        labelStyle="js-reveal__toggle l--push-bottom-0"
        styleClass="js-form__restricted-by-role"
        checked="#{projectHome.instance.isRestrictedByRoles()}"
        value="restrict-access"/>
      <s:div styleClass="bg--high l--pad-top-quarter l--pad-h-quarter"
        rendered="#{projectHome.instance.restrictedByRoles}">
        <ul class="g--tighter">
          <ui:repeat value="#{projectHome.availableRoles}" var="availableRole">
            <li class="g__item w--1-3 w--1-2-s">
              <zanata:checkbox label="#{availableRole.name}"
                onValueChanged="bindRestrictRoleValue"
                checked="#{projectHome.isRoleRestrictionEnabled(availableRole.name)}"
                value="#{availableRole.name}"/>
            </li>
          </ui:repeat>
        </ul>
      </s:div>
    </s:div>
  </h:form>
</li>
<li id="settings-webhooks" class="js-tabs-content">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
      #{msgs['jsf.project.WebHooks']}
  </h2>
  <h:form  id="settings-webhooks-list" onclick="return false">
    <ul class="list--slat list--highlight l--push-top-half">
      <ui:repeat value="#{projectHome.instance.webHooks}" var="webhook">
        <li class="list-item">
            #{webhook.url}
            <a4j:commandLink onbegin="onRemoveWebHook(this)"
              action="#{projectHome.removeWebHook(webhook)}"
              styleClass="l--float-right txt--danger"
              render="settings-webhooks-list">
              <i class="i--large i--remove"></i>
              <zanata:loader layout="inline" type="loader--small"
                jsHandle="true" id="loader" visible="false"/>
            </a4j:commandLink>
        </li>
      </ui:repeat>
      <zanata:loader id="add-url-loader" type="loader--large" visible="false"/>
      <li class="list--highlight__item--none">
        <label for="payloadUrlInput">
          #{msgs['jsf.project.AddWebhook']}
        </label>

        <div class="form--inline">
          <input type="text" id="payloadUrlInput" autocomplete="off"
            placeholder="#{msgs['jsf.project.PayloadURL']}"
            onkeydown="onPayloadInputKeyDown(this, event)"
            class="form--inline__input"/>

          <div class="form--inline__suffix">
            <button class="form--inline__addon button--primary"
              onclick="addWebhook(jQuery('#payloadUrlInput').val())">
              #{msgs['jsf.project.AddWebhook']}
            </button>
          </div>
        </div>
      </li>
    </ul>
  </h:form>
</li>

<li id="settings-about" class="js-tabs-content">
  <h2 class="l--push-all-0 gamma d--bottom l--push-bottom-half">
    #{msgs['jsf.project.About']}
  </h2>

  <p class="message--highlight">
    #{msgs['jsf.project.about.message']}
  </p>
  <h:form id="settings-about-form" styleClass="l--push-bottom-0">

    <h:inputTextarea id="homeContent" required="false" rows="10"
      value="#{projectHome.instance.homeContent}">
    </h:inputTextarea>

    <p class="txt--meta">
      <h:outputText value="#{msgs['jsf.project.about.markup']}"
        escape="false"/>
    </p>

    <a4j:commandLink value="#{msgs['jsf.project.saveNotes']}"
      action="#{projectHome.update}" rendered="#{projectHome.managed}"
      render="project-about"
      styleClass="l--push-top-1 button button--primary"/>
  </h:form>
</li>
</ul>
</div>
</ui:composition>
